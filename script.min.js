class BookmarkHub {
constructor() {
this.bookmarks = [];
this.categories = [];
this.currentFilter = 'all';
this.currentBookmark = null;
this.currentCategory = null;
this.privacyBookmarks = [];
this.privacyCategories = [];
this.privacyCurrentFilter = 'all';
this.isPrivacyMode = false;
this.privacyPassword = null;
this.itemsPerPage = 30;
this.currentPage = 1;
this.privacyCurrentPage = 1;
this.init();
}
init() {
console.log('🔧 开始初始化BookmarkHub');
try {
this.loadData();
this.bindEvents();
this.render();
preventContextMenu();
this.showToast('欢迎使用 BookmarkHub 书签管理！', 'info');
console.log('✅ BookmarkHub初始化完成');
} catch (error) {
console.error('❌ 初始化过程中出错:', error);
}
}
removeEventListeners() {
const searchInput = document.getElementById('searchInput');
const addBookmarkBtn = document.getElementById('addBookmarkBtn');
const backupBtn = document.getElementById('backupBtn');
const bookmarkUrl = document.getElementById('bookmarkUrl');
const addCategoryBtn = document.getElementById('addCategoryBtn');
const closeModal = document.getElementById('closeModal');
const closeCategoryModal = document.getElementById('closeCategoryModal');
const bookmarkForm = document.getElementById('bookmarkForm');
const categoryForm = document.getElementById('categoryForm');
if (this.searchInputHandler && searchInput) {
searchInput.removeEventListener('input', this.searchInputHandler);
}
if (this.addBookmarkHandler && addBookmarkBtn) {
addBookmarkBtn.removeEventListener('click', this.addBookmarkHandler);
}
if (this.backupHandler && backupBtn) {
backupBtn.removeEventListener('click', this.backupHandler);
}
if (this.urlPreviewHandler && bookmarkUrl) {
bookmarkUrl.removeEventListener('input', this.urlPreviewHandler);
}
if (this.addCategoryHandler && addCategoryBtn) {
addCategoryBtn.removeEventListener('click', this.addCategoryHandler);
}
if (this.closeModalHandler && closeModal) {
closeModal.removeEventListener('click', this.closeModalHandler);
}
if (this.closeCategoryModalHandler && closeCategoryModal) {
closeCategoryModal.removeEventListener('click', this.closeCategoryModalHandler);
}
if (this.bookmarkSubmitHandler && bookmarkForm) {
bookmarkForm.removeEventListener('submit', this.bookmarkSubmitHandler);
}
if (this.categorySubmitHandler && categoryForm) {
categoryForm.removeEventListener('submit', this.categorySubmitHandler);
}
const batchDeleteBtn = document.getElementById('batchDeleteBtn');
const privacyBatchDeleteBtn = document.getElementById('privacyBatchDeleteBtn');
if (this.batchDeleteHandler && batchDeleteBtn) {
batchDeleteBtn.removeEventListener('click', this.batchDeleteHandler);
}
if (this.privacyBatchDeleteHandler && privacyBatchDeleteBtn) {
privacyBatchDeleteBtn.removeEventListener('click', this.privacyBatchDeleteHandler);
}
}
bindEvents() {
console.log('🔗 开始绑定事件监听器');
try {
this.removeEventListeners();
this.searchInputHandler = (e) => {
this.handleSearch(e.target.value);
};
document.getElementById('searchInput').addEventListener('input', this.searchInputHandler);
this.addBookmarkHandler = () => {
this.showBookmarkModal();
};
document.getElementById('addBookmarkBtn').addEventListener('click', this.addBookmarkHandler);
this.backupHandler = () => {
this.showBackupModal();
};
document.getElementById('backupBtn').addEventListener('click', this.backupHandler);
this.urlPreviewHandler = (e) => {
const url = e.target.value.trim();
if (url) {
const normalizedUrl = this.normalizeUrl(url);
if (normalizedUrl !== url) {
e.target.title = `将保存为: ${normalizedUrl}`;
} else {
e.target.title = '';
}
} else {
e.target.title = '';
}
};
document.getElementById('bookmarkUrl').addEventListener('input', this.urlPreviewHandler);
this.addCategoryHandler = () => {
this.showCategoryModal();
};
document.getElementById('addCategoryBtn').addEventListener('click', this.addCategoryHandler);
this.batchDeleteHandler = () => {
this.showBatchDeleteConfirm();
};
const batchDeleteBtn = document.getElementById('batchDeleteBtn');
if (batchDeleteBtn) {
batchDeleteBtn.addEventListener('click', this.batchDeleteHandler);
}
this.privacyBatchDeleteHandler = () => {
this.showPrivacyBatchDeleteConfirm();
};
const privacyBatchDeleteBtn = document.getElementById('privacyBatchDeleteBtn');
if (privacyBatchDeleteBtn) {
privacyBatchDeleteBtn.addEventListener('click', this.privacyBatchDeleteHandler);
}
this.closeModalHandler = () => {
this.hideBookmarkModal();
};
document.getElementById('closeModal').addEventListener('click', this.closeModalHandler);
this.closeCategoryModalHandler = () => {
this.hideCategoryModal();
};
document.getElementById('closeCategoryModal').addEventListener('click', this.closeCategoryModalHandler);
this.closeDeleteModalHandler = () => {
this.hideDeleteModal();
};
document.getElementById('closeDeleteModal').addEventListener('click', this.closeDeleteModalHandler);
const bookmarkForm = document.getElementById('bookmarkForm');
const categoryForm = document.getElementById('categoryForm');
if (bookmarkForm) {
this.bookmarkSubmitHandler = (e) => {
e.preventDefault();
this.handleBookmarkSubmit();
};
bookmarkForm.addEventListener('submit', this.bookmarkSubmitHandler);
}
if (categoryForm) {
this.categorySubmitHandler = (e) => {
e.preventDefault();
this.handleCategorySubmit();
};
categoryForm.addEventListener('submit', this.categorySubmitHandler);
}
const cancelBtn = document.getElementById('cancelBtn');
const cancelCategoryBtn = document.getElementById('cancelCategoryBtn');
const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
if (cancelBtn) {
cancelBtn.addEventListener('click', () => {
this.hideBookmarkModal();
});
}
if (cancelCategoryBtn) {
cancelCategoryBtn.addEventListener('click', () => {
this.hideCategoryModal();
});
}
if (cancelDeleteBtn) {
cancelDeleteBtn.addEventListener('click', () => {
this.hideDeleteModal();
});
}
document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
this.confirmDelete();
});
document.querySelectorAll('.modal').forEach(modal => {
modal.addEventListener('click', (e) => {
if (e.target === modal) {
modal.classList.remove('show');
}
});
});
document.addEventListener('keydown', (e) => {
if (e.key === 'Escape') {
this.hideAllModals();
}
if (e.ctrlKey && e.key === 'k') {
e.preventDefault();
document.getElementById('searchInput').focus();
}
});
document.getElementById('categoryColor').addEventListener('change', (e) => {
document.querySelector('.color-preview').style.backgroundColor = e.target.value;
});
window.addEventListener('resize', () => {
this.renderCategories();
});
document.getElementById('bookmarkImage').addEventListener('input', (e) => {
this.handleImagePreview(e.target.value);
});
document.getElementById('removeImageBtn').addEventListener('click', () => {
this.removeImagePreview();
});
document.getElementById('searchHelpBtn').addEventListener('click', (e) => {
e.stopPropagation();
this.toggleSearchHelp();
});
document.addEventListener('click', (e) => {
const searchHelp = document.getElementById('searchHelp');
const searchHelpBtn = document.getElementById('searchHelpBtn');
if (!searchHelp.contains(e.target) && !searchHelpBtn.contains(e.target)) {
searchHelp.classList.remove('show');
}
});
this.bindPaginationEvents();
this.bindPrivacyEvents();
this.bindSettingsEvents();
} catch (error) {
console.error('❌ 事件绑定过程中出错:', error);
}
}
loadData() {
const savedBookmarks = localStorage.getItem('bookmarkhub_bookmarks');
const savedCategories = localStorage.getItem('bookmarkhub_categories');
if (savedBookmarks) {
this.bookmarks = JSON.parse(savedBookmarks);
}
if (savedCategories) {
this.categories = JSON.parse(savedCategories);
} else {
this.categories = [
{ id: 'work', name: '工作', color: '#2196F3' },
{ id: 'study', name: '学习', color: '#4CAF50' },
{ id: 'entertainment', name: '娱乐', color: '#FF9800' }
];
this.saveData();
}
this.fixOrphanedBookmarks();
this.loadBackgroundSettings();
}
fixOrphanedBookmarks() {
let fixedCount = 0;
const categoryIds = new Set(this.categories.map(cat => cat.id));
this.bookmarks.forEach(bookmark => {
if (bookmark.categoryId && !categoryIds.has(bookmark.categoryId)) {
console.log(`🔧 修复孤立书签: "${bookmark.title}" (${bookmark.categoryId} -> null)`);
bookmark.categoryId = null;
fixedCount++;
}
});
if (fixedCount > 0) {
console.log(`✅ 修复了 ${fixedCount} 个孤立书签`);
this.saveData();
}
}
fixOrphanedPrivacyBookmarks() {
let fixedCount = 0;
const categoryIds = new Set(this.privacyCategories.map(cat => cat.id));
this.privacyBookmarks.forEach(bookmark => {
if (bookmark.categoryId && !categoryIds.has(bookmark.categoryId)) {
console.log(`🔧 修复孤立隐私书签: "${bookmark.title}" (${bookmark.categoryId} -> null)`);
bookmark.categoryId = null;
fixedCount++;
}
});
if (fixedCount > 0) {
console.log(`✅ 修复了 ${fixedCount} 个孤立隐私书签`);
this.savePrivacyData();
}
}
saveData() {
localStorage.setItem('bookmarkhub_bookmarks', JSON.stringify(this.bookmarks));
localStorage.setItem('bookmarkhub_categories', JSON.stringify(this.categories));
}
render() {
this.renderCategories();
this.renderBookmarks();
this.updateCategoryOptions();
this.updateBatchActions();
}
renderCategories() {
const container = document.getElementById('categoryChips');
const addButton = container.querySelector('.add-category');
const existingChips = container.querySelectorAll('.chip:not([data-category="all"]):not([data-category="uncategorized"]):not(.add-category):not(.more-categories)');
existingChips.forEach(chip => chip.remove());
const existingMoreBtn = container.querySelector('.more-categories');
if (existingMoreBtn) {
existingMoreBtn.remove();
}
const isMobile = window.innerWidth <= 768;
const maxVisibleCategories = isMobile ? 3 : 5;
const visibleCategories = this.categories.slice(0, maxVisibleCategories);
const hiddenCategories = this.categories.slice(maxVisibleCategories);
visibleCategories.forEach(category => {
const chip = this.createCategoryChip(category);
container.insertBefore(chip, addButton);
});
if (hiddenCategories.length > 0) {
const moreButton = document.createElement('button');
moreButton.className = 'chip more-categories';
moreButton.innerHTML = `更多 <span class="category-count">(${hiddenCategories.length})</span>`;
moreButton.addEventListener('click', () => {
this.showMoreCategoriesModal(hiddenCategories);
});
container.insertBefore(moreButton, addButton);
}
container.querySelector('[data-category="all"]').addEventListener('click', () => {
this.setFilter('all');
});
container.querySelector('[data-category="uncategorized"]').addEventListener('click', () => {
this.setFilter('uncategorized');
});
}
createCategoryChip(category) {
const chip = document.createElement('button');
chip.className = 'chip category-chip';
chip.dataset.category = category.id;
chip.style.borderColor = category.color;
const nameSpan = document.createElement('span');
nameSpan.className = 'category-name';
nameSpan.textContent = category.name;
const deleteBtn = document.createElement('button');
deleteBtn.className = 'category-delete-btn';
deleteBtn.innerHTML = '<i class="fas fa-times"></i>';
deleteBtn.title = '删除分类';
chip.appendChild(nameSpan);
chip.appendChild(deleteBtn);
if (this.currentFilter === category.id) {
chip.classList.add('active');
chip.style.backgroundColor = category.color;
chip.style.color = 'white';
}
chip.addEventListener('click', (e) => {
if (e.target.closest('.category-delete-btn')) {
return;
}
if (chip.classList.contains('long-pressing')) {
return;
}
this.setFilter(category.id);
});
deleteBtn.addEventListener('click', (e) => {
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
this.showDeleteCategoryConfirm(category);
});
deleteBtn.addEventListener('touchend', (e) => {
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
this.showDeleteCategoryConfirm(category);
});
this.addLongPressToCategory(chip);
deleteBtn.style.opacity = '0';
deleteBtn.style.visibility = 'hidden';
deleteBtn.style.pointerEvents = 'none';
deleteBtn.style.transform = 'scale(0.8)';
return chip;
}
addLongPressToCategory(chip) {
let longPressTimer = null;
let isLongPressing = false;
let startTime = 0;
const startLongPress = (e) => {
if (e.target.closest('.category-delete-btn')) {
return;
}
startTime = Date.now();
isLongPressing = false;
longPressTimer = setTimeout(() => {
isLongPressing = true;
chip.classList.add('long-pressing');
const deleteBtn = chip.querySelector('.category-delete-btn');
if (deleteBtn) {
deleteBtn.style.opacity = '1';
deleteBtn.style.visibility = 'visible';
deleteBtn.style.pointerEvents = 'auto';
deleteBtn.style.transform = 'scale(1)';
}
if (navigator.vibrate) {
navigator.vibrate(50);
}
setTimeout(() => {
if (chip.classList.contains('long-pressing')) {
chip.classList.remove('long-pressing');
isLongPressing = false;
if (deleteBtn) {
deleteBtn.style.opacity = '0';
deleteBtn.style.visibility = 'hidden';
deleteBtn.style.pointerEvents = 'none';
deleteBtn.style.transform = 'scale(0.8)';
}
}
}, 3000);
}, 500);
};
const endLongPress = (e) => {
if (longPressTimer) {
clearTimeout(longPressTimer);
longPressTimer = null;
}
const pressDuration = Date.now() - startTime;
if (!isLongPressing && pressDuration < 500 && !e.target.closest('.category-delete-btn')) {
return;
}
};
const cancelLongPress = () => {
if (longPressTimer) {
clearTimeout(longPressTimer);
longPressTimer = null;
}
chip.classList.remove('long-pressing');
isLongPressing = false;
const deleteBtn = chip.querySelector('.category-delete-btn');
if (deleteBtn) {
deleteBtn.style.opacity = '0';
deleteBtn.style.visibility = 'hidden';
deleteBtn.style.pointerEvents = 'none';
deleteBtn.style.transform = 'scale(0.8)';
}
};
chip.addEventListener('mousedown', (e) => {
if (e.button !== 0) return;
e.preventDefault();
startLongPress(e);
});
chip.addEventListener('mouseup', (e) => {
if (e.button !== 0) return;
endLongPress(e);
});
chip.addEventListener('mouseleave', (e) => {
cancelLongPress(e);
});
chip.addEventListener('contextmenu', (e) => {
e.preventDefault();
});
chip.addEventListener('touchstart', (e) => {
startLongPress(e);
}, { passive: true });
chip.addEventListener('touchend', (e) => {
endLongPress(e);
if (isLongPressing && !e.target.closest('.category-delete-btn')) {
e.preventDefault();
e.stopPropagation();
}
});
chip.addEventListener('touchcancel', cancelLongPress);
let touchStartX = 0;
let touchStartY = 0;
chip.addEventListener('touchstart', (e) => {
if (e.touches.length > 0) {
touchStartX = e.touches[0].clientX;
touchStartY = e.touches[0].clientY;
}
}, { passive: true });
chip.addEventListener('touchmove', (e) => {
if (e.touches.length > 0) {
const deltaX = Math.abs(e.touches[0].clientX - touchStartX);
const deltaY = Math.abs(e.touches[0].clientY - touchStartY);
if (deltaX > 10 || deltaY > 10) {
cancelLongPress();
}
}
}, { passive: true });
document.addEventListener('click', (e) => {
if (!chip.contains(e.target)) {
chip.classList.remove('long-pressing');
isLongPressing = false;
const deleteBtn = chip.querySelector('.category-delete-btn');
if (deleteBtn) {
deleteBtn.style.opacity = '0';
deleteBtn.style.visibility = 'hidden';
deleteBtn.style.pointerEvents = 'none';
deleteBtn.style.transform = 'scale(0.8)';
}
}
});
}
showDeleteCategoryConfirm(category) {
const modal = document.createElement('div');
modal.className = 'modal';
modal.style.display = 'flex';
const bookmarksInCategory = (this.isPrivacyMode ? this.privacyBookmarks : this.bookmarks)
.filter(bookmark => bookmark.categoryId === category.id);
const hasBookmarks = bookmarksInCategory.length > 0;
modal.innerHTML = `
<div class="modal-content">
<div class="modal-header">
<h2>删除分类</h2>
<button class="modal-close">
<i class="fas fa-times"></i>
</button>
</div>
<div class="modal-body">
<p>确定要删除分类 <strong style="color: ${category.color}">${category.name}</strong> 吗？</p>
${hasBookmarks ? `
<div class="warning-message">
<i class="fas fa-exclamation-triangle"></i>
<span>该分类下有 ${bookmarksInCategory.length} 个书签，删除后这些书签将被移到"未分类"。</span>
</div>
` : ''}
</div>
<div class="modal-footer">
<button class="btn btn-secondary cancel-delete-category">取消</button>
<button class="btn btn-danger confirm-delete-category">
删除分类
</button>
</div>
</div>
`;
document.body.appendChild(modal);
setTimeout(() => {
modal.classList.add('show');
}, 10);
const closeBtn = modal.querySelector('.modal-close');
const cancelBtn = modal.querySelector('.cancel-delete-category');
const confirmBtn = modal.querySelector('.confirm-delete-category');
const closeModal = () => {
modal.remove();
};
closeBtn.addEventListener('click', closeModal);
cancelBtn.addEventListener('click', closeModal);
confirmBtn.addEventListener('click', () => {
this.deleteCategory(category.id);
closeModal();
});
modal.addEventListener('click', (e) => {
if (e.target === modal) {
closeModal();
}
});
}
deleteCategory(categoryId) {
const categories = this.isPrivacyMode ? this.privacyCategories : this.categories;
const bookmarks = this.isPrivacyMode ? this.privacyBookmarks : this.bookmarks;
bookmarks.forEach(bookmark => {
if (bookmark.categoryId === categoryId) {
bookmark.categoryId = null;
}
});
const categoryIndex = categories.findIndex(cat => cat.id === categoryId);
if (categoryIndex > -1) {
categories.splice(categoryIndex, 1);
}
const currentFilter = this.isPrivacyMode ? this.privacyCurrentFilter : this.currentFilter;
if (currentFilter === categoryId) {
if (this.isPrivacyMode) {
this.privacyCurrentFilter = 'all';
} else {
this.currentFilter = 'all';
}
}
if (this.isPrivacyMode) {
this.savePrivacyData();
this.renderPrivacySpace();
} else {
this.saveData();
this.render();
}
this.showToast(`分类已删除`, 'success');
}
showMoreCategoriesModal(hiddenCategories) {
const modal = document.createElement('div');
modal.className = 'modal show';
modal.innerHTML = `
<div class="modal-content">
<div class="modal-header">
<h2>选择分类</h2>
<button class="modal-close">
<i class="fas fa-times"></i>
</button>
</div>
<div class="modal-body">
<div class="category-grid">
${hiddenCategories.map(category => `
<button class="category-item ${this.currentFilter === category.id ? 'active' : ''}"
data-category="${category.id}"
style="border-color: ${category.color}; ${this.currentFilter === category.id ? `background-color: ${category.color}; color: white;` : ''}">
<span class="category-dot" style="background-color: ${category.color};"></span>
${category.name}
</button>
`).join('')}
</div>
</div>
</div>
`;
document.body.appendChild(modal);
modal.querySelector('.modal-close').addEventListener('click', () => {
document.body.removeChild(modal);
});
modal.addEventListener('click', (e) => {
if (e.target === modal) {
document.body.removeChild(modal);
}
});
modal.querySelectorAll('.category-item').forEach(item => {
item.addEventListener('click', () => {
const categoryId = item.dataset.category;
this.setFilter(categoryId);
document.body.removeChild(modal);
});
});
}
renderBookmarks() {
const container = document.getElementById('bookmarksGrid');
const emptyState = document.getElementById('emptyState');
const pagination = document.getElementById('pagination');
const filteredBookmarks = this.getFilteredBookmarks();
const currentPage = this.isPrivacyMode ? this.privacyCurrentPage : this.currentPage;
if (filteredBookmarks.length === 0) {
container.style.display = 'none';
emptyState.style.display = 'block';
pagination.style.display = 'none';
return;
}
const totalPages = Math.ceil(filteredBookmarks.length / this.itemsPerPage);
const startIndex = (currentPage - 1) * this.itemsPerPage;
const endIndex = startIndex + this.itemsPerPage;
const pageBookmarks = filteredBookmarks.slice(startIndex, endIndex);
container.style.display = 'grid';
emptyState.style.display = 'none';
container.innerHTML = '';
pageBookmarks.forEach(bookmark => {
const card = this.createBookmarkCard(bookmark);
container.appendChild(card);
});
this.updatePagination(currentPage, totalPages, filteredBookmarks.length);
}
updatePagination(currentPage, totalPages, totalItems) {
const pagination = document.getElementById('pagination');
const paginationInfo = document.getElementById('paginationInfo');
const firstPageBtn = document.getElementById('firstPageBtn');
const prevPageBtn = document.getElementById('prevPageBtn');
const nextPageBtn = document.getElementById('nextPageBtn');
const lastPageBtn = document.getElementById('lastPageBtn');
const pageJumpInput = document.getElementById('pageJumpInput');
if (totalPages <= 1) {
pagination.style.display = 'none';
return;
}
pagination.style.display = 'flex';
paginationInfo.textContent = `第 ${currentPage} 页，共 ${totalPages} 页（${totalItems} 个书签）`;
firstPageBtn.disabled = currentPage === 1;
prevPageBtn.disabled = currentPage === 1;
nextPageBtn.disabled = currentPage === totalPages;
lastPageBtn.disabled = currentPage === totalPages;
pageJumpInput.max = totalPages;
pageJumpInput.placeholder = `1-${totalPages}`;
}
goToPage(page) {
const filteredBookmarks = this.getFilteredBookmarks();
const totalPages = Math.ceil(filteredBookmarks.length / this.itemsPerPage);
if (page < 1 || page > totalPages) {
return;
}
if (this.isPrivacyMode) {
this.privacyCurrentPage = page;
} else {
this.currentPage = page;
}
this.renderBookmarks();
}
bindPaginationEvents() {
const firstPageBtn = document.getElementById('firstPageBtn');
const prevPageBtn = document.getElementById('prevPageBtn');
const nextPageBtn = document.getElementById('nextPageBtn');
const lastPageBtn = document.getElementById('lastPageBtn');
const pageJumpBtn = document.getElementById('pageJumpBtn');
const pageJumpInput = document.getElementById('pageJumpInput');
firstPageBtn.addEventListener('click', () => {
this.goToPage(1);
});
prevPageBtn.addEventListener('click', () => {
const currentPage = this.isPrivacyMode ? this.privacyCurrentPage : this.currentPage;
this.goToPage(currentPage - 1);
});
nextPageBtn.addEventListener('click', () => {
const currentPage = this.isPrivacyMode ? this.privacyCurrentPage : this.currentPage;
this.goToPage(currentPage + 1);
});
lastPageBtn.addEventListener('click', () => {
const filteredBookmarks = this.getFilteredBookmarks();
const totalPages = Math.ceil(filteredBookmarks.length / this.itemsPerPage);
this.goToPage(totalPages);
});
pageJumpBtn.addEventListener('click', () => {
const page = parseInt(pageJumpInput.value);
if (page) {
this.goToPage(page);
pageJumpInput.value = '';
}
});
pageJumpInput.addEventListener('keypress', (e) => {
if (e.key === 'Enter') {
const page = parseInt(e.target.value);
if (page) {
this.goToPage(page);
e.target.value = '';
}
}
});
}
createBookmarkCard(bookmark) {
const card = document.createElement('div');
card.className = bookmark.imageUrl ? 'bookmark-card has-image' : 'bookmark-card';
card.dataset.id = bookmark.id;
const categories = this.isPrivacyMode ? this.privacyCategories : this.categories;
const category = categories.find(cat => cat.id === bookmark.categoryId);
const categoryName = category ? category.name : '未分类';
const categoryColor = category ? category.color : '#757575';
const faviconUrl = this.getFaviconUrl(bookmark.url);
let cardContent = '';
if (bookmark.imageUrl) {
cardContent += `
<div class="bookmark-image" style="background-image: url('${bookmark.imageUrl}')"></div>
`;
} else {
cardContent += `
<div class="bookmark-placeholder"></div>
`;
}
cardContent += `
<div class="bookmark-card-content">
<div class="bookmark-header">
<div class="bookmark-favicon">
<img src="${faviconUrl}" alt="" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
<i class="fas fa-globe" style="display: none;"></i>
</div>
<div class="bookmark-content">
<h3 class="bookmark-title">${this.escapeHtml(bookmark.title)}</h3>
</div>
</div>
<div class="bookmark-actions">
<button class="bookmark-action edit" title="编辑">
<i class="fas fa-edit"></i>
</button>
<button class="bookmark-action delete" title="删除">
<i class="fas fa-trash"></i>
</button>
</div>
</div>
<span class="bookmark-category" style="background-color: ${categoryColor}20; color: ${categoryColor};">
${categoryName}
</span>
`;
card.innerHTML = cardContent;
let finalElement = card;
if (bookmark.description) {
const wrapper = document.createElement('div');
wrapper.className = 'bookmark-card-wrapper';
wrapper.appendChild(card);
const descBox = document.createElement('div');
descBox.className = 'bookmark-description-box';
descBox.innerHTML = `<div class="bookmark-description">${this.escapeHtml(bookmark.description)}</div>`;
wrapper.appendChild(descBox);
finalElement = wrapper;
}
let longPressTimer = null;
let isLongPressing = false;
let hasMoved = false;
const isMobile = 'ontouchstart' in window;
const eventTarget = card;
if (isMobile) {
eventTarget.addEventListener('contextmenu', (e) => {
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
return false;
}, true);
eventTarget.addEventListener('selectstart', (e) => {
e.preventDefault();
return false;
});
eventTarget.addEventListener('dragstart', (e) => {
e.preventDefault();
return false;
});
eventTarget.addEventListener('touchstart', (e) => {
isLongPressing = false;
hasMoved = false;
if (longPressTimer) {
clearTimeout(longPressTimer);
}
longPressTimer = setTimeout(() => {
isLongPressing = true;
card.classList.add('show-actions');
const oldActionsEl = card.querySelector('.bookmark-actions');
if (oldActionsEl) {
oldActionsEl.remove();
}
const newActionsEl = document.createElement('div');
newActionsEl.style.cssText = `
position: absolute !important;
top: 8px !important;
right: 8px !important;
z-index: 9999 !important;
background: rgba(0, 0, 0, 0.8) !important;
border-radius: 8px !important;
padding: 4px !important;
display: flex !important;
gap: 4px !important;
opacity: 1 !important;
visibility: visible !important;
pointer-events: auto !important;
`;
newActionsEl.onclick = (e) => {
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
return false;
};
const editBtn = document.createElement('button');
editBtn.innerHTML = '✏️';
editBtn.style.cssText = `
background: rgba(255, 255, 255, 0.9) !important;
border: none !important;
border-radius: 4px !important;
padding: 8px !important;
cursor: pointer !important;
font-size: 14px !important;
display: flex !important;
align-items: center !important;
justify-content: center !important;
width: 32px !important;
height: 32px !important;
opacity: 1 !important;
visibility: visible !important;
pointer-events: auto !important;
`;
editBtn.onclick = (e) => {
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
setTimeout(() => {
this.editBookmark(bookmark);
}, 10);
return false;
};
const deleteBtn = document.createElement('button');
deleteBtn.innerHTML = '🗑️';
deleteBtn.style.cssText = `
background: rgba(255, 255, 255, 0.9) !important;
border: none !important;
border-radius: 4px !important;
padding: 8px !important;
cursor: pointer !important;
font-size: 14px !important;
display: flex !important;
align-items: center !important;
justify-content: center !important;
width: 32px !important;
height: 32px !important;
opacity: 1 !important;
visibility: visible !important;
pointer-events: auto !important;
`;
deleteBtn.onclick = (e) => {
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
setTimeout(() => {
this.deleteBookmark(bookmark);
}, 10);
return false;
};
newActionsEl.appendChild(editBtn);
newActionsEl.appendChild(deleteBtn);
card.appendChild(newActionsEl);
if (navigator.vibrate) {
navigator.vibrate(50);
}
}, 600);
}, { passive: true });
eventTarget.addEventListener('touchmove', (e) => {
hasMoved = true;
if (longPressTimer) {
clearTimeout(longPressTimer);
longPressTimer = null;
}
}, { passive: true });
eventTarget.addEventListener('touchend', (e) => {
if (longPressTimer) {
clearTimeout(longPressTimer);
longPressTimer = null;
}
const clickedButton = e.target.tagName === 'BUTTON' || e.target.closest('button');
const clickedActions = e.target.parentElement?.style?.zIndex === '9999';
if (!isLongPressing && !hasMoved && !clickedButton && !clickedActions) {
this.openBookmark(bookmark);
}
setTimeout(() => {
isLongPressing = false;
hasMoved = false;
}, 100);
}, { passive: true });
eventTarget.addEventListener('touchcancel', (e) => {
if (longPressTimer) {
clearTimeout(longPressTimer);
longPressTimer = null;
}
setTimeout(() => {
isLongPressing = false;
hasMoved = false;
}, 100);
}, { passive: true });
} else {
eventTarget.addEventListener('click', (e) => {
if (!e.target.closest('.bookmark-actions')) {
this.openBookmark(bookmark);
}
});
}
document.addEventListener('click', (e) => {
if (!eventTarget.contains(e.target)) {
eventTarget.classList.remove('show-actions');
}
});
const editBtn = card.querySelector('.edit');
const deleteBtn = card.querySelector('.delete');
if (editBtn) {
editBtn.addEventListener('click', (e) => {
e.stopPropagation();
this.editBookmark(bookmark);
});
}
if (deleteBtn) {
deleteBtn.addEventListener('click', (e) => {
e.stopPropagation();
this.deleteBookmark(bookmark);
});
}
return finalElement;
}
getFaviconUrl(url) {
try {
const domain = new URL(url).hostname;
return `https:
} catch {
return '';
}
}
formatDate(timestamp) {
const date = new Date(timestamp);
const now = new Date();
const diff = now - date;
if (diff < 24 * 60 * 60 * 1000) {
return '今天';
} else if (diff < 7 * 24 * 60 * 60 * 1000) {
return `${Math.floor(diff / (24 * 60 * 60 * 1000))}天前`;
} else {
return date.toLocaleDateString('zh-CN');
}
}
escapeHtml(text) {
const div = document.createElement('div');
div.textContent = text;
return div.innerHTML;
}
getFilteredBookmarks() {
let filtered = this.bookmarks;
if (this.currentFilter !== 'all') {
if (this.currentFilter === 'uncategorized') {
filtered = filtered.filter(bookmark => !bookmark.categoryId);
} else {
filtered = filtered.filter(bookmark => bookmark.categoryId === this.currentFilter);
}
}
const searchQuery = document.getElementById('searchInput').value.trim();
if (searchQuery) {
filtered = filtered.filter(bookmark => this.matchesAdvancedSearch(bookmark, searchQuery));
}
return filtered.sort((a, b) => b.createdAt - a.createdAt);
}
toggleSearchHelp() {
const searchHelp = document.getElementById('searchHelp');
searchHelp.classList.toggle('show');
}
matchesAdvancedSearch(bookmark, searchQuery) {
const searchableContent = [
bookmark.title,
bookmark.url,
bookmark.description || ''
].join(' ').toLowerCase();
const searchTerms = this.parseSearchQuery(searchQuery.toLowerCase());
return searchTerms.every(term => {
if (term.type === 'and') {
return term.keywords.every(keyword => searchableContent.includes(keyword));
} else if (term.type === 'or') {
return term.keywords.some(keyword => searchableContent.includes(keyword));
}
return false;
});
}
parseSearchQuery(query) {
const terms = [];
const parts = query.split(' ').filter(part => part.trim());
for (const part of parts) {
if (part.includes('|')) {
const orKeywords = part.split('|').map(k => k.trim()).filter(k => k);
if (orKeywords.length > 0) {
terms.push({
type: 'or',
keywords: orKeywords
});
}
} else {
terms.push({
type: 'and',
keywords: [part.trim()]
});
}
}
return terms;
}
bindPrivacyEvents() {
const privacySpaceBtn = document.getElementById('privacySpaceBtn');
if (privacySpaceBtn) {
privacySpaceBtn.addEventListener('click', () => {
this.showPrivacyPasswordModal();
});
}
document.getElementById('privacyPasswordForm').addEventListener('submit', (e) => {
e.preventDefault();
this.handlePrivacyPasswordSubmit();
});
document.getElementById('privacyPasswordToggle').addEventListener('click', () => {
this.togglePasswordVisibility('privacyPassword', 'privacyPasswordToggle');
});
document.getElementById('closePrivacyPasswordModal').addEventListener('click', () => {
this.hidePrivacyPasswordModal();
});
document.getElementById('cancelPrivacyPasswordBtn').addEventListener('click', () => {
this.hidePrivacyPasswordModal();
});
document.getElementById('exitPrivacySpaceBtn').addEventListener('click', () => {
this.exitPrivacySpace();
});
this.bindPrivacySettingsEvents();
document.getElementById('privacySearchInput').addEventListener('input', (e) => {
if (this.isPrivacyMode) {
this.handlePrivacySearch(e.target.value);
}
});
document.getElementById('privacySearchHelpBtn').addEventListener('click', (e) => {
e.stopPropagation();
this.togglePrivacySearchHelp();
});
document.getElementById('addPrivacyBookmarkBtn').addEventListener('click', () => {
if (this.isPrivacyMode) {
this.showBookmarkModal();
}
});
document.getElementById('addPrivacyCategoryBtn').addEventListener('click', () => {
if (this.isPrivacyMode) {
this.showCategoryModal();
}
});
}
showPrivacyPasswordModal() {
const modal = document.getElementById('privacyPasswordModal');
const setupDiv = document.getElementById('privacySetup');
const passwordInput = document.getElementById('privacyPassword');
const confirmInput = document.getElementById('privacyPasswordConfirm');
const btnText = document.getElementById('privacyPasswordBtnText');
const errorDiv = document.getElementById('privacyPasswordError');
passwordInput.value = '';
confirmInput.value = '';
errorDiv.style.display = 'none';
const savedPassword = localStorage.getItem('bookmarkhub_privacy_password');
if (!savedPassword) {
setupDiv.style.display = 'block';
passwordInput.placeholder = '设置隐私空间密码（至少4位）';
btnText.textContent = '创建';
} else {
setupDiv.style.display = 'none';
passwordInput.placeholder = '请输入隐私空间密码';
btnText.textContent = '进入';
}
modal.classList.add('show');
passwordInput.focus();
}
hidePrivacyPasswordModal() {
const modal = document.getElementById('privacyPasswordModal');
modal.classList.remove('show');
}
handlePrivacyPasswordSubmit() {
const password = document.getElementById('privacyPassword').value;
const confirmPassword = document.getElementById('privacyPasswordConfirm').value;
const setupDiv = document.getElementById('privacySetup');
const errorDiv = document.getElementById('privacyPasswordError');
const errorText = document.getElementById('privacyPasswordErrorText');
if (!password || password.length < 4) {
this.showPasswordError('密码至少需要4位字符');
return;
}
const savedPassword = localStorage.getItem('bookmarkhub_privacy_password');
if (!savedPassword) {
if (setupDiv.style.display !== 'none') {
if (!confirmPassword) {
this.showPasswordError('请确认密码');
return;
}
if (password !== confirmPassword) {
this.showPasswordError('两次输入的密码不一致');
return;
}
const encryptedPassword = btoa(password);
localStorage.setItem('bookmarkhub_privacy_password', encryptedPassword);
this.showToast('隐私空间密码设置成功！', 'success');
}
} else {
if (!this.verifyPrivacyPassword(password)) {
try {
const decryptedPassword = atob(savedPassword);
if (password !== decryptedPassword) {
this.showPasswordError('密码错误，请重试');
return;
}
const passwordHash = btoa(password + 'salt_key_2024');
localStorage.setItem('bookmarkhub_privacy_password', passwordHash);
} catch (error) {
this.showPasswordError('密码错误，请重试');
return;
}
}
}
this.privacyPassword = password;
this.enterPrivacySpace();
this.hidePrivacyPasswordModal();
}
showPasswordError(message) {
const errorDiv = document.getElementById('privacyPasswordError');
const errorText = document.getElementById('privacyPasswordErrorText');
errorText.textContent = message;
errorDiv.style.display = 'flex';
}
togglePasswordVisibility(inputId, toggleId) {
const input = document.getElementById(inputId);
const toggle = document.getElementById(toggleId);
const icon = toggle.querySelector('i');
if (input.type === 'password') {
input.type = 'text';
icon.className = 'fas fa-eye-slash';
} else {
input.type = 'password';
icon.className = 'fas fa-eye';
}
}
enterPrivacySpace() {
this.isPrivacyMode = true;
this.loadPrivacyData();
this.checkAndProcessTempImportedData();
document.querySelector('.app').style.display = 'none';
document.getElementById('privacySpace').style.display = 'block';
this.bindPrivacySpaceEvents();
this.renderPrivacySpace();
this.showToast('欢迎进入隐私空间 🔒', 'info');
}
exitPrivacySpace() {
this.isPrivacyMode = false;
this.privacyPassword = null;
document.getElementById('privacySpace').style.display = 'none';
document.querySelector('.app').style.display = 'block';
this.showToast('已退出隐私空间', 'info');
}
loadPrivacyData() {
if (!this.privacyPassword) return;
if (this.loadPrivacyDataSecure()) {
this.fixOrphanedPrivacyBookmarks();
return;
}
const savedPrivacyBookmarks = localStorage.getItem('bookmarkhub_privacy_bookmarks');
const savedPrivacyCategories = localStorage.getItem('bookmarkhub_privacy_categories');
if (savedPrivacyBookmarks) {
this.privacyBookmarks = JSON.parse(savedPrivacyBookmarks);
}
if (savedPrivacyCategories) {
this.privacyCategories = JSON.parse(savedPrivacyCategories);
}
this.fixOrphanedPrivacyBookmarks();
if (savedPrivacyBookmarks || savedPrivacyCategories) {
this.savePrivacyDataSecure();
}
}
savePrivacyData() {
this.savePrivacyDataSecure();
if (!this.isPrivacyMode) return;
localStorage.setItem('bookmarkhub_privacy_bookmarks', JSON.stringify(this.privacyBookmarks));
localStorage.setItem('bookmarkhub_privacy_categories', JSON.stringify(this.privacyCategories));
}
renderPrivacySpace() {
this.renderPrivacyCategories();
this.renderPrivacyBookmarks();
this.updateCategoryOptions();
this.updateBatchActions();
}
renderPrivacyCategories() {
const container = document.getElementById('privacyCategoryChips');
const addButton = container.querySelector('.add-category');
const existingChips = container.querySelectorAll('.chip:not([data-category="all"]):not([data-category="uncategorized"]):not(.add-category):not(.more-categories)');
existingChips.forEach(chip => chip.remove());
const existingMoreBtn = container.querySelector('.more-categories');
if (existingMoreBtn) {
existingMoreBtn.remove();
}
const isMobile = window.innerWidth <= 768;
const maxVisibleCategories = isMobile ? 3 : 5;
const visibleCategories = this.privacyCategories.slice(0, maxVisibleCategories);
const hiddenCategories = this.privacyCategories.slice(maxVisibleCategories);
visibleCategories.forEach(category => {
const chip = this.createPrivacyCategoryChip(category);
container.insertBefore(chip, addButton);
});
if (hiddenCategories.length > 0) {
const moreButton = document.createElement('button');
moreButton.className = 'chip more-categories';
moreButton.innerHTML = `更多 <span class="category-count">(${hiddenCategories.length})</span>`;
moreButton.addEventListener('click', () => {
this.showMorePrivacyCategoriesModal(hiddenCategories);
});
container.insertBefore(moreButton, addButton);
}
container.querySelector('[data-category="all"]').addEventListener('click', () => {
this.setPrivacyFilter('all');
});
container.querySelector('[data-category="uncategorized"]').addEventListener('click', () => {
this.setPrivacyFilter('uncategorized');
});
}
createPrivacyCategoryChip(category) {
const chip = document.createElement('button');
chip.className = 'chip';
chip.dataset.category = category.id;
chip.textContent = category.name;
chip.style.borderColor = category.color;
if (this.privacyCurrentFilter === category.id) {
chip.classList.add('active');
chip.style.backgroundColor = category.color;
chip.style.color = 'white';
}
chip.addEventListener('click', () => {
this.setPrivacyFilter(category.id);
});
return chip;
}
setPrivacyFilter(filter) {
this.privacyCurrentFilter = filter;
this.renderPrivacyCategories();
this.renderPrivacyBookmarks();
this.updateBatchActions();
}
renderPrivacyBookmarks() {
const container = document.getElementById('privacyBookmarksGrid');
const emptyState = document.getElementById('privacyEmptyState');
container.innerHTML = '';
const filteredBookmarks = this.getFilteredPrivacyBookmarks();
if (filteredBookmarks.length === 0) {
emptyState.style.display = 'flex';
return;
} else {
emptyState.style.display = 'none';
}
filteredBookmarks.forEach(bookmark => {
const card = this.createBookmarkCard(bookmark);
container.appendChild(card);
});
}
getFilteredPrivacyBookmarks() {
let filtered = this.privacyBookmarks;
if (this.privacyCurrentFilter !== 'all') {
if (this.privacyCurrentFilter === 'uncategorized') {
filtered = filtered.filter(bookmark => !bookmark.categoryId);
} else {
filtered = filtered.filter(bookmark => bookmark.categoryId === this.privacyCurrentFilter);
}
}
const searchQuery = document.getElementById('privacySearchInput').value.trim();
if (searchQuery) {
filtered = filtered.filter(bookmark => this.matchesAdvancedSearch(bookmark, searchQuery));
}
return filtered.sort((a, b) => b.createdAt - a.createdAt);
}
handlePrivacySearch(query) {
this.renderPrivacyBookmarks();
}
togglePrivacySearchHelp() {
const searchHelp = document.getElementById('privacySearchHelp');
searchHelp.classList.toggle('show');
}
bindPrivacySpaceEvents() {
const privacySearchInput = document.getElementById('privacySearchInput');
if (privacySearchInput) {
privacySearchInput.removeEventListener('input', this.privacySearchHandler);
this.privacySearchHandler = (e) => {
if (this.isPrivacyMode) {
this.handlePrivacySearch(e.target.value);
}
};
privacySearchInput.addEventListener('input', this.privacySearchHandler);
}
const privacySearchHelpBtn = document.getElementById('privacySearchHelpBtn');
if (privacySearchHelpBtn) {
privacySearchHelpBtn.removeEventListener('click', this.privacySearchHelpHandler);
this.privacySearchHelpHandler = (e) => {
e.stopPropagation();
this.togglePrivacySearchHelp();
};
privacySearchHelpBtn.addEventListener('click', this.privacySearchHelpHandler);
}
const addPrivacyBookmarkBtn = document.getElementById('addPrivacyBookmarkBtn');
if (addPrivacyBookmarkBtn) {
addPrivacyBookmarkBtn.removeEventListener('click', this.addPrivacyBookmarkHandler);
this.addPrivacyBookmarkHandler = () => {
if (this.isPrivacyMode) {
this.showBookmarkModal();
}
};
addPrivacyBookmarkBtn.addEventListener('click', this.addPrivacyBookmarkHandler);
}
const addPrivacyCategoryBtn = document.getElementById('addPrivacyCategoryBtn');
if (addPrivacyCategoryBtn) {
addPrivacyCategoryBtn.removeEventListener('click', this.addPrivacyCategoryHandler);
this.addPrivacyCategoryHandler = () => {
if (this.isPrivacyMode) {
this.showCategoryModal();
}
};
addPrivacyCategoryBtn.addEventListener('click', this.addPrivacyCategoryHandler);
}
const privacyBackupBtn = document.getElementById('privacyBackupBtn');
if (privacyBackupBtn) {
privacyBackupBtn.removeEventListener('click', this.privacyBackupHandler);
this.privacyBackupHandler = () => {
this.showBackupModal();
};
privacyBackupBtn.addEventListener('click', this.privacyBackupHandler);
}
const privacySettingsBtn = document.getElementById('privacySettingsBtn');
if (privacySettingsBtn) {
privacySettingsBtn.removeEventListener('click', this.privacySettingsHandler);
this.privacySettingsHandler = () => {
this.showPrivacySettingsModal();
};
privacySettingsBtn.addEventListener('click', this.privacySettingsHandler);
}
const exitPrivacySpaceBtn = document.getElementById('exitPrivacySpaceBtn');
if (exitPrivacySpaceBtn) {
exitPrivacySpaceBtn.removeEventListener('click', this.exitPrivacySpaceHandler);
this.exitPrivacySpaceHandler = () => {
this.exitPrivacySpace();
};
exitPrivacySpaceBtn.addEventListener('click', this.exitPrivacySpaceHandler);
}
document.addEventListener('click', (e) => {
const searchHelp = document.getElementById('privacySearchHelp');
const searchHelpBtn = document.getElementById('privacySearchHelpBtn');
if (searchHelp && searchHelpBtn &&
!searchHelp.contains(e.target) && !searchHelpBtn.contains(e.target)) {
searchHelp.classList.remove('show');
}
});
}
setFilter(filter) {
this.currentFilter = filter;
this.currentPage = 1;
document.querySelectorAll('.chip').forEach(chip => {
chip.classList.remove('active');
chip.style.backgroundColor = '';
chip.style.color = '';
});
const activeChip = document.querySelector(`[data-category="${filter}"]`);
if (activeChip) {
activeChip.classList.add('active');
if (filter !== 'all' && filter !== 'uncategorized') {
const category = this.categories.find(cat => cat.id === filter);
if (category) {
activeChip.style.backgroundColor = category.color;
activeChip.style.color = 'white';
}
}
}
this.updateBatchActions();
this.renderBookmarks();
}
updateBatchActions() {
const batchActions = document.getElementById('batchActions');
const privacyBatchActions = document.getElementById('privacyBatchActions');
if (this.isPrivacyMode) {
if (privacyBatchActions) {
const shouldShow = this.privacyCurrentFilter !== 'all' &&
this.getFilteredPrivacyBookmarks().length > 0;
privacyBatchActions.style.display = shouldShow ? 'flex' : 'none';
}
} else {
if (batchActions) {
const shouldShow = this.currentFilter !== 'all' &&
this.getFilteredBookmarks().length > 0;
batchActions.style.display = shouldShow ? 'flex' : 'none';
}
}
}
showBatchDeleteConfirm() {
const categoryName = this.getCategoryName(this.currentFilter);
const bookmarksCount = this.getFilteredBookmarks().length;
if (bookmarksCount === 0) {
this.showToast('当前分类下没有书签', 'info');
return;
}
const modal = document.createElement('div');
modal.className = 'modal';
modal.style.display = 'flex';
modal.innerHTML = `
<div class="modal-content">
<div class="modal-header">
<h2>批量删除确认</h2>
<button class="modal-close">
<i class="fas fa-times"></i>
</button>
</div>
<div class="modal-body">
<div class="warning-content">
<i class="fas fa-exclamation-triangle" style="color: var(--error); font-size: 2rem; margin-bottom: 1rem;"></i>
<p>您确定要<strong style="color: var(--error);">彻底删除</strong>分类 <strong>"${categoryName}"</strong> 下的所有 <strong>${bookmarksCount}</strong> 个书签吗？</p>
<p style="color: var(--on-surface-variant); font-size: 0.9rem; margin: 0.5rem 0;">
这些书签将从所有位置完全移除，包括"全部"标签页。
</p>
<p style="color: var(--error); font-size: 0.9rem; margin-top: 1rem;">
<i class="fas fa-exclamation-triangle"></i> 此操作不可撤销！
</p>
</div>
</div>
<div class="modal-footer">
<button class="btn btn-secondary cancel-batch-delete">取消</button>
<button class="btn btn-danger confirm-batch-delete">删除所有书签</button>
</div>
</div>
`;
document.body.appendChild(modal);
modal.classList.add('show');
modal.querySelector('.modal-close').addEventListener('click', () => {
document.body.removeChild(modal);
});
modal.querySelector('.cancel-batch-delete').addEventListener('click', () => {
document.body.removeChild(modal);
});
modal.querySelector('.confirm-batch-delete').addEventListener('click', () => {
this.batchDeleteBookmarks();
document.body.removeChild(modal);
});
modal.addEventListener('click', (e) => {
if (e.target === modal) {
document.body.removeChild(modal);
}
});
}
showPrivacyBatchDeleteConfirm() {
const categoryName = this.getPrivacyCategoryName(this.privacyCurrentFilter);
const bookmarksCount = this.getFilteredPrivacyBookmarks().length;
if (bookmarksCount === 0) {
this.showToast('当前分类下没有隐私书签', 'info');
return;
}
const modal = document.createElement('div');
modal.className = 'modal';
modal.style.display = 'flex';
modal.innerHTML = `
<div class="modal-content">
<div class="modal-header">
<h2>批量删除确认</h2>
<button class="modal-close">
<i class="fas fa-times"></i>
</button>
</div>
<div class="modal-body">
<div class="warning-content">
<i class="fas fa-exclamation-triangle" style="color: var(--error); font-size: 2rem; margin-bottom: 1rem;"></i>
<p>您确定要<strong style="color: var(--error);">彻底删除</strong>隐私分类 <strong>"${categoryName}"</strong> 下的所有 <strong>${bookmarksCount}</strong> 个书签吗？</p>
<p style="color: var(--on-surface-variant); font-size: 0.9rem; margin: 0.5rem 0;">
这些隐私书签将从所有位置完全移除，包括隐私空间的"全部"标签页。
</p>
<p style="color: var(--error); font-size: 0.9rem; margin-top: 1rem;">
<i class="fas fa-exclamation-triangle"></i> 此操作不可撤销！
</p>
</div>
</div>
<div class="modal-footer">
<button class="btn btn-secondary cancel-batch-delete">取消</button>
<button class="btn btn-danger confirm-batch-delete">删除所有书签</button>
</div>
</div>
`;
document.body.appendChild(modal);
modal.classList.add('show');
modal.querySelector('.modal-close').addEventListener('click', () => {
document.body.removeChild(modal);
});
modal.querySelector('.cancel-batch-delete').addEventListener('click', () => {
document.body.removeChild(modal);
});
modal.querySelector('.confirm-batch-delete').addEventListener('click', () => {
this.batchDeletePrivacyBookmarks();
document.body.removeChild(modal);
});
modal.addEventListener('click', (e) => {
if (e.target === modal) {
document.body.removeChild(modal);
}
});
}
batchDeleteBookmarks() {
const bookmarksToDelete = this.getFilteredBookmarks();
const categoryName = this.getCategoryName(this.currentFilter);
const deleteCount = bookmarksToDelete.length;
const bookmarkIdsToDelete = bookmarksToDelete.map(bookmark => bookmark.id);
this.bookmarks = this.bookmarks.filter(bookmark => !bookmarkIdsToDelete.includes(bookmark.id));
this.saveData();
const container = document.getElementById('bookmarksGrid');
if (container) {
container.innerHTML = '';
}
this.setFilter('all');
setTimeout(() => {
this.render();
}, 50);
this.showToast(`已彻底删除分类"${categoryName}"下的 ${deleteCount} 个书签`, 'success');
}
batchDeletePrivacyBookmarks() {
const bookmarksToDelete = this.getFilteredPrivacyBookmarks();
const categoryName = this.getPrivacyCategoryName(this.privacyCurrentFilter);
const deleteCount = bookmarksToDelete.length;
const bookmarkIdsToDelete = bookmarksToDelete.map(bookmark => bookmark.id);
this.privacyBookmarks = this.privacyBookmarks.filter(bookmark => !bookmarkIdsToDelete.includes(bookmark.id));
this.savePrivacyData();
const container = document.getElementById('bookmarksGrid');
if (container) {
container.innerHTML = '';
}
this.setPrivacyFilter('all');
setTimeout(() => {
this.renderPrivacySpace();
}, 50);
this.showToast(`已彻底删除隐私分类"${categoryName}"下的 ${deleteCount} 个书签`, 'success');
}
getCategoryName(categoryId) {
if (categoryId === 'uncategorized') {
return '未分类';
}
const category = this.categories.find(cat => cat.id === categoryId);
return category ? category.name : '未知分类';
}
getPrivacyCategoryName(categoryId) {
if (categoryId === 'uncategorized') {
return '未分类';
}
const category = this.privacyCategories.find(cat => cat.id === categoryId);
return category ? category.name : '未知分类';
}
handleSearch(query) {
this.currentPage = 1;
this.renderBookmarks();
this.updateBatchActions();
}
showBookmarkModal(bookmark = null) {
this.currentBookmark = bookmark;
const modal = document.getElementById('bookmarkModal');
const title = document.getElementById('modalTitle');
const form = document.getElementById('bookmarkForm');
if (modal.parentElement.style.display === 'none') {
document.body.appendChild(modal);
}
if (bookmark) {
title.textContent = '编辑书签';
document.getElementById('bookmarkUrl').value = bookmark.url;
document.getElementById('bookmarkTitle').value = bookmark.title;
document.getElementById('bookmarkDescription').value = bookmark.description || '';
document.getElementById('bookmarkImage').value = bookmark.imageUrl || '';
document.getElementById('bookmarkCategory').value = bookmark.categoryId || '';
if (bookmark.imageUrl) {
this.handleImagePreview(bookmark.imageUrl);
}
} else {
title.textContent = this.isPrivacyMode ? '添加隐私书签' : '添加书签';
form.reset();
this.removeImagePreview();
}
modal.classList.add('show');
document.getElementById('bookmarkUrl').focus();
}
hideBookmarkModal() {
const modal = document.getElementById('bookmarkModal');
modal.classList.remove('show');
modal.style.display = '';
modal.style.opacity = '';
modal.style.visibility = '';
const modalContent = modal.querySelector('.modal-content');
if (modalContent) {
modalContent.style.transform = '';
modalContent.style.background = '';
modalContent.style.color = '';
modalContent.style.display = '';
modalContent.style.opacity = '';
modalContent.style.visibility = '';
}
this.currentBookmark = null;
}
showCategoryModal() {
const modal = document.getElementById('categoryModal');
if (modal.parentElement.style.display === 'none') {
document.body.appendChild(modal);
}
document.getElementById('categoryForm').reset();
document.getElementById('categoryColor').value = '#2196F3';
document.querySelector('.color-preview').style.backgroundColor = '#2196F3';
modal.classList.add('show');
document.getElementById('categoryName').focus();
}
hideCategoryModal() {
const modal = document.getElementById('categoryModal');
modal.classList.remove('show');
modal.style.display = '';
modal.style.opacity = '';
modal.style.visibility = '';
const modalContent = modal.querySelector('.modal-content');
if (modalContent) {
modalContent.style.transform = '';
modalContent.style.background = '';
modalContent.style.color = '';
modalContent.style.display = '';
modalContent.style.opacity = '';
modalContent.style.visibility = '';
}
}
showDeleteModal(bookmark) {
this.currentBookmark = bookmark;
const modal = document.getElementById('deleteModal');
if (modal.parentElement.style.display === 'none') {
console.log('🔄 删除确认模态框父容器被隐藏，移动模态框到body');
document.body.appendChild(modal);
}
const message = document.getElementById('deleteMessage');
message.textContent = `确定要删除「${bookmark.title}」吗？此操作无法撤销。`;
modal.classList.add('show');
}
hideDeleteModal() {
document.getElementById('deleteModal').classList.remove('show');
this.currentBookmark = null;
}
hideAllModals() {
document.querySelectorAll('.modal').forEach(modal => {
modal.classList.remove('show');
});
this.currentBookmark = null;
}
handleBookmarkSubmit() {
let url = document.getElementById('bookmarkUrl').value.trim();
const title = document.getElementById('bookmarkTitle').value.trim();
const description = document.getElementById('bookmarkDescription').value.trim();
const imageUrl = document.getElementById('bookmarkImage').value.trim();
const categoryId = document.getElementById('bookmarkCategory').value;
if (!url || !title) {
this.showToast('请填写必填字段', 'error');
return;
}
url = this.normalizeUrl(url);
if (!this.isValidUrl(url)) {
this.showToast('请输入有效的网址（如：baidu.com 或 https:
return;
}
if (imageUrl && !this.isValidImageUrl(imageUrl)) {
this.showToast('请输入有效的图片链接', 'error');
return;
}
if (this.currentBookmark) {
this.currentBookmark.url = url;
this.currentBookmark.title = title;
this.currentBookmark.description = description;
this.currentBookmark.imageUrl = imageUrl || null;
this.currentBookmark.categoryId = categoryId || null;
this.currentBookmark.updatedAt = Date.now();
this.showToast(this.isPrivacyMode ? '隐私书签已更新' : '书签已更新', 'success');
} else {
const bookmark = {
id: this.generateId(),
url,
title,
description,
imageUrl: imageUrl || null,
categoryId: categoryId || null,
createdAt: Date.now(),
updatedAt: Date.now(),
visitCount: 0
};
if (this.isPrivacyMode) {
this.privacyBookmarks.push(bookmark);
} else {
this.bookmarks.push(bookmark);
}
this.showToast(this.isPrivacyMode ? '隐私书签已添加' : '书签已添加', 'success');
}
if (this.isPrivacyMode) {
this.savePrivacyData();
this.renderPrivacySpace();
} else {
this.saveData();
this.render();
}
this.hideBookmarkModal();
}
handleCategorySubmit() {
const name = document.getElementById('categoryName').value.trim();
const color = document.getElementById('categoryColor').value;
if (!name) {
this.showToast('请输入分类名称', 'error');
return;
}
const categories = this.isPrivacyMode ? this.privacyCategories : this.categories;
if (categories.some(cat => cat.name === name)) {
this.showToast('分类名称已存在', 'error');
return;
}
const category = {
id: this.generateId(),
name,
color
};
if (this.isPrivacyMode) {
this.privacyCategories.push(category);
this.savePrivacyData();
this.renderPrivacySpace();
} else {
this.categories.push(category);
this.saveData();
this.render();
}
this.hideCategoryModal();
this.showToast(this.isPrivacyMode ? '隐私分类已添加' : '分类已添加', 'success');
}
openBookmark(bookmark) {
bookmark.visitCount = (bookmark.visitCount || 0) + 1;
bookmark.lastVisited = Date.now();
this.saveData();
window.open(bookmark.url, '_blank');
this.showToast('正在打开书签...', 'info');
}
editBookmark(bookmark) {
this.showBookmarkModal(bookmark);
}
deleteBookmark(bookmark) {
this.showDeleteModal(bookmark);
}
confirmDelete() {
if (this.currentBookmark) {
const bookmarks = this.isPrivacyMode ? this.privacyBookmarks : this.bookmarks;
const index = bookmarks.findIndex(b => b.id === this.currentBookmark.id);
if (index > -1) {
bookmarks.splice(index, 1);
if (this.isPrivacyMode) {
this.savePrivacyData();
this.renderPrivacySpace();
} else {
this.saveData();
this.render();
}
this.showToast(this.isPrivacyMode ? '隐私书签已删除' : '书签已删除', 'success');
}
}
this.hideDeleteModal();
}
updateCategoryOptions() {
const select = document.getElementById('bookmarkCategory');
const currentValue = select.value;
select.innerHTML = '<option value="">未分类</option>';
const categories = this.isPrivacyMode ? this.privacyCategories : this.categories;
categories.forEach(category => {
const option = document.createElement('option');
option.value = category.id;
option.textContent = category.name;
select.appendChild(option);
});
select.value = currentValue;
}
isValidUrl(string) {
try {
new URL(string);
return true;
} catch (_) {
return false;
}
}
normalizeUrl(url) {
if (!url) return '';
url = url.trim();
if (url.startsWith('http:
return url;
}
if (url.includes('.') && !url.includes(' ')) {
return 'https:
}
return url;
}
generateId() {
return Date.now().toString(36) + Math.random().toString(36).substr(2);
}
handleImagePreview(imageUrl) {
const previewContainer = document.getElementById('imagePreviewContainer');
const previewImg = document.getElementById('imagePreview');
if (!imageUrl || !this.isValidImageUrl(imageUrl)) {
previewContainer.style.display = 'none';
return;
}
previewImg.src = '';
previewContainer.style.display = 'block';
const img = new Image();
img.onload = () => {
previewImg.src = imageUrl;
};
img.onerror = () => {
previewContainer.style.display = 'none';
this.showToast('图片加载失败，请检查链接是否正确', 'error');
};
img.src = imageUrl;
}
removeImagePreview() {
document.getElementById('bookmarkImage').value = '';
document.getElementById('imagePreviewContainer').style.display = 'none';
}
isValidImageUrl(url) {
if (!url) return false;
try {
new URL(url);
} catch {
return false;
}
const imageExtensions = /\.(jpg|jpeg|png|gif|webp|svg)(\?|$)/i;
return imageExtensions.test(url);
}
showToast(message, type = 'info') {
const toast = document.getElementById('toast');
const icon = toast.querySelector('.toast-icon');
const messageEl = toast.querySelector('.toast-message');
const icons = {
success: 'fas fa-check-circle',
error: 'fas fa-exclamation-circle',
info: 'fas fa-info-circle',
warning: 'fas fa-exclamation-triangle'
};
icon.className = `toast-icon ${icons[type] || icons.info}`;
messageEl.textContent = message;
toast.className = `toast ${type}`;
toast.classList.add('show');
setTimeout(() => {
toast.classList.remove('show');
}, 3000);
}
encrypt(text, password) {
const utf8Text = unescape(encodeURIComponent(text));
const key = this.generateKeyFromPassword(password);
let encrypted = '';
for (let i = 0; i < utf8Text.length; i++) {
encrypted += String.fromCharCode(utf8Text.charCodeAt(i) ^ key.charCodeAt(i % key.length));
}
return this.binaryToHex(encrypted);
}
decrypt(encryptedText, password) {
try {
const key = this.generateKeyFromPassword(password);
let encrypted;
let isHexFormat = true;
try {
encrypted = this.hexToBinary(encryptedText);
} catch (hexError) {
try {
encrypted = atob(encryptedText);
isHexFormat = false;
} catch (base64Error) {
throw new Error('无法解析加密数据格式');
}
}
let decrypted = '';
for (let i = 0; i < encrypted.length; i++) {
decrypted += String.fromCharCode(encrypted.charCodeAt(i) ^ key.charCodeAt(i % key.length));
}
if (isHexFormat) {
return decodeURIComponent(escape(decrypted));
} else {
return decrypted;
}
} catch (error) {
console.error('解密错误:', error);
throw new Error('解密失败: ' + error.message);
}
}
generateKeyFromPassword(password) {
let key = password;
while (key.length < 32) {
key += password;
}
return key.substring(0, 32);
}
binaryToHex(binary) {
let hex = '';
for (let i = 0; i < binary.length; i++) {
const byte = binary.charCodeAt(i);
hex += byte.toString(16).padStart(2, '0');
}
return hex;
}
hexToBinary(hex) {
let binary = '';
for (let i = 0; i < hex.length; i += 2) {
const byte = parseInt(hex.substr(i, 2), 16);
binary += String.fromCharCode(byte);
}
return binary;
}
savePrivacyDataSecure() {
if (!this.privacyPassword) return;
try {
const privacyData = {
bookmarks: this.privacyBookmarks || [],
categories: this.privacyCategories || [],
timestamp: Date.now()
};
const encryptedData = this.encrypt(JSON.stringify(privacyData), this.privacyPassword);
localStorage.setItem('bookmarkhub_privacy_data_secure', encryptedData);
const passwordHash = btoa(this.privacyPassword + 'salt_key_2024');
localStorage.setItem('bookmarkhub_privacy_password', passwordHash);
} catch (error) {
console.error('隐私数据保存失败:', error);
}
}
loadPrivacyDataSecure() {
if (!this.privacyPassword) return false;
try {
const encryptedData = localStorage.getItem('bookmarkhub_privacy_data_secure');
if (!encryptedData) return false;
const decryptedData = this.decrypt(encryptedData, this.privacyPassword);
const privacyData = JSON.parse(decryptedData);
this.privacyBookmarks = privacyData.bookmarks || [];
this.privacyCategories = privacyData.categories || [];
return true;
} catch (error) {
console.error('隐私数据加载失败:', error);
return false;
}
}
verifyPrivacyPassword(password) {
const savedHash = localStorage.getItem('bookmarkhub_privacy_password');
if (!savedHash) return false;
const passwordHash = btoa(password + 'salt_key_2024');
return passwordHash === savedHash;
}
exportAllData(includePrivacy = false, privacyPassword = null) {
console.log('exportAllData被调用，包含隐私数据:', includePrivacy, '密码长度:', privacyPassword ? privacyPassword.length : 0);
const data = {
version: '1.0',
exportDate: new Date().toISOString(),
bookmarks: this.bookmarks,
categories: this.categories
};
console.log('基础数据准备完成 - 书签:', data.bookmarks.length, '分类:', data.categories.length);
if (includePrivacy) {
console.log('开始处理隐私数据');
const savedPassword = localStorage.getItem('bookmarkhub_privacy_password');
if (!savedPassword) {
this.showToast('未设置隐私空间密码，无法导出隐私数据', 'error');
return;
}
if (!privacyPassword) {
this.showToast('请输入隐私空间密码', 'error');
return;
}
if (!this.verifyPrivacyPassword(privacyPassword)) {
this.showToast('隐私空间密码错误', 'error');
return;
}
console.log('密码验证通过，开始加载隐私数据');
const tempPrivacyPassword = this.privacyPassword;
this.privacyPassword = privacyPassword;
this.loadPrivacyData();
const privacyData = {
bookmarks: this.privacyBookmarks || [],
categories: this.privacyCategories || []
};
console.log('隐私数据加载完成 - 书签:', privacyData.bookmarks.length, '分类:', privacyData.categories.length);
this.privacyPassword = tempPrivacyPassword;
if (privacyData.bookmarks.length === 0 && privacyData.categories.length === 0) {
this.showToast('隐私空间暂无数据，已导出普通数据', 'warning');
} else {
console.log('开始加密隐私数据');
data.privacyData = this.encrypt(JSON.stringify(privacyData), privacyPassword);
console.log('隐私数据加密完成，长度:', data.privacyData.length);
}
}
console.log('准备下载文件');
const jsonString = JSON.stringify(data, null, 2);
const filename = `bookmarkhub-backup-${new Date().toISOString().split('T')[0]}.json`;
console.log('导出备份文件，使用标准方式');
try {
const blob = new Blob([jsonString], { type: 'application/json' });
const url = URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = filename;
a.style.display = 'none';
document.body.appendChild(a);
a.click();
setTimeout(() => {
if (document.body.contains(a)) {
document.body.removeChild(a);
}
URL.revokeObjectURL(url);
}, 100);
} catch (error) {
console.log('文件下载失败:', error);
this.showToast('下载失败，请重试', 'error');
return;
}
const message = includePrivacy ? '完整数据备份已导出（含隐私数据）' : '数据备份已导出';
this.showToast(message, 'success');
console.log('导出完成:', message);
}
exportData() {
this.exportAllData(false);
}
importData(file, privacyPassword = null) {
const reader = new FileReader();
reader.onload = (e) => {
try {
const data = JSON.parse(e.target.result);
if (!data.bookmarks || !data.categories) {
this.showToast('无效的备份文件：缺少必要数据', 'error');
return;
}
this.bookmarks = data.bookmarks;
this.categories = data.categories;
this.fixOrphanedBookmarks();
this.saveData();
if (data.privacyData && privacyPassword) {
try {
const decryptedPrivacyData = this.decrypt(data.privacyData, privacyPassword);
const privacyData = JSON.parse(decryptedPrivacyData);
const importedBookmarks = privacyData.bookmarks || [];
const importedCategories = privacyData.categories || [];
const existingPasswordHash = localStorage.getItem('bookmarkhub_privacy_password');
if (!existingPasswordHash) {
this.privacyBookmarks = importedBookmarks;
this.privacyCategories = importedCategories;
this.fixOrphanedPrivacyBookmarks();
this.privacyPassword = privacyPassword;
this.savePrivacyDataSecure();
const passwordHash = btoa(privacyPassword + 'salt_key_2024');
localStorage.setItem('bookmarkhub_privacy_password', passwordHash);
this.showToast('数据和隐私数据已成功导入，隐私空间密码已设置', 'success');
} else {
this.handlePrivacyDataImport(importedBookmarks, importedCategories, privacyPassword);
}
} catch (error) {
this.showToast('隐私数据解密失败，仅导入普通数据', 'warning');
}
} else {
if (data.privacyData && !privacyPassword) {
this.showToast('备份包含隐私数据但未提供密码，仅导入普通数据', 'warning');
} else {
this.showToast('数据已成功导入', 'success');
}
}
this.render();
} catch (error) {
this.showToast('导入失败：文件格式错误', 'error');
}
};
reader.onerror = () => {
this.showToast('文件读取失败', 'error');
};
reader.readAsText(file);
}
showBackupModal() {
const modal = document.createElement('div');
modal.className = 'modal';
modal.innerHTML = `
<div class="modal-content">
<div class="modal-header">
<h2>数据备份与恢复</h2>
<button class="modal-close">
<i class="fas fa-times"></i>
</button>
</div>
<div class="modal-body">
<div class="backup-section">
<h3><i class="fas fa-download"></i> 导出备份</h3>
<div class="backup-options">
<button class="btn btn-primary export-normal" id="exportNormalBtn">
<i class="fas fa-file-export"></i>
导出普通数据
</button>
<button class="btn btn-secondary export-all" id="exportAllBtn">
<i class="fas fa-shield-alt"></i>
导出全部数据（含隐私）
</button>
</div>
<div class="privacy-password-input" id="exportPrivacyPassword" style="display: none;">
<label>隐私空间密码：</label>
<input type="password" id="exportPasswordInput" placeholder="输入隐私空间密码">
</div>
</div>
<div class="backup-section">
<h3><i class="fas fa-upload"></i> 导入恢复</h3>
<div class="import-area">
<input type="file" id="importFileInput" accept=".json" style="display: none;">
<button class="btn btn-outline" id="selectFileBtn">
<i class="fas fa-file-import"></i>
选择备份文件
</button>
<div class="file-info" id="fileInfo" style="display: none;">
<span id="fileName"></span>
<button class="btn btn-danger btn-small" id="clearFileBtn">清除</button>
</div>
</div>
<div class="privacy-password-input" id="importPrivacyPassword" style="display: none;">
<label>隐私空间密码（如果备份包含隐私数据）：</label>
<input type="password" id="importPasswordInput" placeholder="输入隐私空间密码">
</div>
<button class="btn btn-primary" id="importBtn" disabled>
<i class="fas fa-upload"></i>
开始导入
</button>
</div>
<div class="backup-info">
<h4><i class="fas fa-info-circle"></i> 备份说明</h4>
<ul>
<li>普通数据包含所有书签和分类信息</li>
<li>隐私数据经过加密保护，需要密码才能访问</li>
<li>建议定期备份重要数据</li>
<li>导入数据会覆盖现有数据，请谨慎操作</li>
</ul>
</div>
</div>
</div>
`;
document.body.appendChild(modal);
setTimeout(() => modal.classList.add('show'), 10);
this.bindBackupModalEvents(modal);
}
bindBackupModalEvents(modal) {
const closeBtn = modal.querySelector('.modal-close');
const exportNormalBtn = modal.querySelector('#exportNormalBtn');
const exportAllBtn = modal.querySelector('#exportAllBtn');
const selectFileBtn = modal.querySelector('#selectFileBtn');
const importFileInput = modal.querySelector('#importFileInput');
const importBtn = modal.querySelector('#importBtn');
const clearFileBtn = modal.querySelector('#clearFileBtn');
closeBtn.addEventListener('click', () => modal.remove());
modal.addEventListener('click', (e) => {
if (e.target === modal) modal.remove();
});
exportNormalBtn.addEventListener('click', () => {
this.exportData();
});
exportAllBtn.addEventListener('click', () => {
console.log('导出全部数据按钮被点击');
const passwordDiv = modal.querySelector('#exportPrivacyPassword');
if (passwordDiv.style.display === 'none') {
console.log('显示密码输入框');
passwordDiv.style.display = 'block';
exportAllBtn.innerHTML = '<i class="fas fa-shield-alt"></i> 确认导出';
} else {
const password = modal.querySelector('#exportPasswordInput').value;
console.log('准备导出，密码长度:', password.length);
if (!password) {
this.showToast('请输入隐私空间密码', 'error');
return;
}
const savedPassword = localStorage.getItem('bookmarkhub_privacy_password');
if (!savedPassword) {
this.showToast('未设置隐私空间密码，无法导出隐私数据', 'error');
return;
}
console.log('开始验证密码');
if (!this.verifyPrivacyPassword(password)) {
console.log('密码验证失败');
this.showToast('隐私空间密码错误', 'error');
return;
}
console.log('密码验证成功，开始导出');
this.exportAllData(true, password);
modal.remove();
}
});
selectFileBtn.addEventListener('click', () => {
importFileInput.click();
});
importFileInput.addEventListener('change', (e) => {
const file = e.target.files[0];
if (file) {
modal.querySelector('#fileName').textContent = file.name;
modal.querySelector('#fileInfo').style.display = 'flex';
modal.querySelector('#importPrivacyPassword').style.display = 'block';
importBtn.disabled = false;
}
});
clearFileBtn.addEventListener('click', () => {
importFileInput.value = '';
modal.querySelector('#fileInfo').style.display = 'none';
modal.querySelector('#importPrivacyPassword').style.display = 'none';
importBtn.disabled = true;
});
importBtn.addEventListener('click', () => {
const file = importFileInput.files[0];
const password = modal.querySelector('#importPasswordInput').value;
if (!file) {
this.showToast('请选择备份文件', 'error');
return;
}
if (confirm('导入数据将覆盖现有数据，确定继续吗？')) {
this.importData(file, password);
modal.remove();
}
});
}
bindPrivacySettingsEvents() {
const closePrivacySettingsModal = document.getElementById('closePrivacySettingsModal');
if (closePrivacySettingsModal) {
closePrivacySettingsModal.addEventListener('click', () => {
this.hidePrivacySettingsModal();
});
}
const changePrivacyPasswordBtn = document.getElementById('changePrivacyPasswordBtn');
if (changePrivacyPasswordBtn) {
changePrivacyPasswordBtn.addEventListener('click', () => {
this.showChangePasswordModal();
});
}
const changePasswordForm = document.getElementById('changePasswordForm');
if (changePasswordForm) {
changePasswordForm.addEventListener('submit', (e) => {
e.preventDefault();
this.handleChangePassword();
});
}
const currentPasswordToggle = document.getElementById('currentPasswordToggle');
if (currentPasswordToggle) {
currentPasswordToggle.addEventListener('click', () => {
this.togglePasswordVisibility('currentPassword', 'currentPasswordToggle');
});
}
const newPasswordToggle = document.getElementById('newPasswordToggle');
if (newPasswordToggle) {
newPasswordToggle.addEventListener('click', () => {
this.togglePasswordVisibility('newPassword', 'newPasswordToggle');
});
}
const confirmNewPasswordToggle = document.getElementById('confirmNewPasswordToggle');
if (confirmNewPasswordToggle) {
confirmNewPasswordToggle.addEventListener('click', () => {
this.togglePasswordVisibility('confirmNewPassword', 'confirmNewPasswordToggle');
});
}
const closeChangePasswordModal = document.getElementById('closeChangePasswordModal');
if (closeChangePasswordModal) {
closeChangePasswordModal.addEventListener('click', () => {
this.hideChangePasswordModal();
});
}
const cancelChangePasswordBtn = document.getElementById('cancelChangePasswordBtn');
if (cancelChangePasswordBtn) {
cancelChangePasswordBtn.addEventListener('click', () => {
this.hideChangePasswordModal();
});
}
window.addEventListener('click', (e) => {
const privacySettingsModal = document.getElementById('privacySettingsModal');
const changePasswordModal = document.getElementById('changePasswordModal');
if (e.target === privacySettingsModal) {
this.hidePrivacySettingsModal();
}
if (e.target === changePasswordModal) {
this.hideChangePasswordModal();
}
});
}
showPrivacySettingsModal() {
const modal = document.getElementById('privacySettingsModal');
if (modal) {
modal.classList.add('show');
modal.style.display = 'flex';
}
}
hidePrivacySettingsModal() {
const modal = document.getElementById('privacySettingsModal');
if (modal) {
modal.classList.remove('show');
modal.style.display = 'none';
}
}
showChangePasswordModal() {
this.hidePrivacySettingsModal();
const modal = document.getElementById('changePasswordModal');
if (modal) {
document.getElementById('currentPassword').value = '';
document.getElementById('newPassword').value = '';
document.getElementById('confirmNewPassword').value = '';
const errorDiv = document.getElementById('changePasswordError');
if (errorDiv) {
errorDiv.style.display = 'none';
}
modal.classList.add('show');
modal.style.display = 'flex';
setTimeout(() => {
document.getElementById('currentPassword').focus();
}, 100);
}
}
hideChangePasswordModal() {
const modal = document.getElementById('changePasswordModal');
if (modal) {
modal.classList.remove('show');
modal.style.display = 'none';
}
}
handleChangePassword() {
const currentPassword = document.getElementById('currentPassword').value;
const newPassword = document.getElementById('newPassword').value;
const confirmNewPassword = document.getElementById('confirmNewPassword').value;
if (!currentPassword) {
this.showChangePasswordError('请输入当前密码');
return;
}
if (!newPassword || newPassword.length < 4) {
this.showChangePasswordError('新密码至少需要4位字符');
return;
}
if (newPassword !== confirmNewPassword) {
this.showChangePasswordError('两次输入的新密码不一致');
return;
}
if (currentPassword === newPassword) {
this.showChangePasswordError('新密码不能与当前密码相同');
return;
}
if (!this.verifyPrivacyPassword(currentPassword)) {
this.showChangePasswordError('当前密码错误');
return;
}
try {
this.reencryptPrivacyData(currentPassword, newPassword);
const passwordHash = btoa(newPassword + 'salt_key_2024');
localStorage.setItem('bookmarkhub_privacy_password', passwordHash);
this.privacyPassword = newPassword;
this.showToast('隐私空间密码更改成功！', 'success');
this.hideChangePasswordModal();
} catch (error) {
console.error('密码更改失败:', error);
this.showChangePasswordError('密码更改失败，请重试');
}
}
reencryptPrivacyData(oldPassword, newPassword) {
try {
const encryptedBookmarks = localStorage.getItem('bookmarkhub_privacy_bookmarks_encrypted');
if (encryptedBookmarks) {
const decryptedBookmarks = this.decrypt(encryptedBookmarks, oldPassword);
const reencryptedBookmarks = this.encrypt(decryptedBookmarks, newPassword);
localStorage.setItem('bookmarkhub_privacy_bookmarks_encrypted', reencryptedBookmarks);
}
const encryptedCategories = localStorage.getItem('bookmarkhub_privacy_categories_encrypted');
if (encryptedCategories) {
const decryptedCategories = this.decrypt(encryptedCategories, oldPassword);
const reencryptedCategories = this.encrypt(decryptedCategories, newPassword);
localStorage.setItem('bookmarkhub_privacy_categories_encrypted', reencryptedCategories);
}
console.log('✅ 隐私数据重新加密完成');
} catch (error) {
console.error('❌ 重新加密失败:', error);
throw new Error('数据重新加密失败');
}
}
showChangePasswordError(message) {
const errorDiv = document.getElementById('changePasswordError');
const errorText = document.getElementById('changePasswordErrorText');
if (errorDiv && errorText) {
errorText.textContent = message;
errorDiv.style.display = 'flex';
setTimeout(() => {
errorDiv.style.display = 'none';
}, 3000);
}
}
getCurrentPrivacyPassword() {
if (this.isPrivacyMode && this.privacyPassword) {
return this.privacyPassword;
}
return null;
}
handlePrivacyDataImport(importedBookmarks, importedCategories, importPassword) {
if (this.isPrivacyMode && this.privacyPassword) {
this.smartMergePrivacyData(importedBookmarks, importedCategories);
this.showToast('隐私数据已成功导入并合并', 'success');
return;
}
this.tempImportedPrivacyData = {
bookmarks: importedBookmarks,
categories: importedCategories,
timestamp: Date.now()
};
this.showToast('隐私数据已导入，进入隐私空间时将自动合并', 'success');
}
smartMergePrivacyData(importedBookmarks, importedCategories) {
const existingCategoryNames = new Set(this.privacyCategories.map(c => c.name));
const newCategories = importedCategories.filter(c => !existingCategoryNames.has(c.name));
this.privacyCategories.push(...newCategories);
const existingUrls = new Set(this.privacyBookmarks.map(b => b.url));
const newBookmarks = importedBookmarks.filter(b => !existingUrls.has(b.url));
this.privacyBookmarks.push(...newBookmarks);
this.fixOrphanedPrivacyBookmarks();
this.savePrivacyDataSecure();
if (this.isPrivacyMode) {
this.renderPrivacySpace();
}
console.log(`✅ 智能合并: 新增 ${newCategories.length} 个分类, ${newBookmarks.length} 个书签`);
}
checkAndProcessTempImportedData() {
if (this.tempImportedPrivacyData) {
const tempData = this.tempImportedPrivacyData;
this.smartMergePrivacyData(tempData.bookmarks, tempData.categories);
this.showToast('✨ 之前导入的隐私数据已自动合并', 'success');
delete this.tempImportedPrivacyData;
}
}
bindSettingsEvents() {
document.getElementById('settingsBtn').addEventListener('click', () => {
this.showSettingsModal();
});
document.getElementById('closeSettingsModal').addEventListener('click', () => {
this.hideSettingsModal();
});
document.querySelectorAll('input[name="backgroundType"]').forEach(radio => {
radio.addEventListener('change', (e) => {
this.handleBackgroundTypeChange(e.target.value);
});
});
document.getElementById('selectImageBtn').addEventListener('click', () => {
document.getElementById('backgroundUpload').click();
});
document.getElementById('backgroundUpload').addEventListener('change', (e) => {
this.handleImageUpload(e);
});
document.getElementById('previewUrlBtn').addEventListener('click', () => {
this.previewUrlImage();
});
document.getElementById('backgroundOpacity').addEventListener('input', (e) => {
this.updateOpacityValue(e.target.value);
});
document.getElementById('backgroundBlur').addEventListener('input', (e) => {
this.updateBlurValue(e.target.value);
});
document.getElementById('interfaceOpacity').addEventListener('input', (e) => {
this.updateInterfaceOpacityValue(e.target.value);
});
document.getElementById('applyBackgroundBtn').addEventListener('click', () => {
this.applyBackground();
});
document.getElementById('resetBackgroundBtn').addEventListener('click', () => {
this.resetBackground();
});
}
showSettingsModal() {
const modal = document.getElementById('settingsModal');
modal.classList.add('show');
this.loadCurrentBackgroundSettings();
}
hideSettingsModal() {
const modal = document.getElementById('settingsModal');
modal.classList.remove('show');
}
handleBackgroundTypeChange(type) {
document.getElementById('uploadOption').style.display = 'none';
document.getElementById('urlOption').style.display = 'none';
document.getElementById('backgroundSettings').style.display = 'none';
if (type === 'upload') {
document.getElementById('uploadOption').style.display = 'block';
document.getElementById('backgroundSettings').style.display = 'block';
} else if (type === 'url') {
document.getElementById('urlOption').style.display = 'block';
document.getElementById('backgroundSettings').style.display = 'block';
}
this.updateBackgroundPreview();
}
handleImageUpload(event) {
const file = event.target.files[0];
if (!file) return;
if (!file.type.startsWith('image/')) {
this.showToast('请选择图片文件', 'error');
return;
}
if (file.size > 5 * 1024 * 1024) {
this.showToast('图片文件过大，请选择小于5MB的图片', 'error');
return;
}
const reader = new FileReader();
reader.onload = (e) => {
this.currentBackgroundData = {
type: 'upload',
data: e.target.result,
size: document.getElementById('backgroundSize').value,
opacity: document.getElementById('backgroundOpacity').value,
blur: document.getElementById('backgroundBlur').value,
interfaceOpacity: document.getElementById('interfaceOpacity').value
};
this.updateBackgroundPreview();
this.showToast('图片上传成功', 'success');
};
reader.readAsDataURL(file);
}
previewUrlImage() {
const url = document.getElementById('backgroundUrl').value.trim();
if (!url) {
this.showToast('请输入图片链接', 'error');
return;
}
try {
new URL(url);
} catch {
this.showToast('请输入有效的图片链接', 'error');
return;
}
const img = new Image();
img.onload = () => {
this.currentBackgroundData = {
type: 'url',
data: url,
size: document.getElementById('backgroundSize').value,
opacity: document.getElementById('backgroundOpacity').value,
blur: document.getElementById('backgroundBlur').value,
interfaceOpacity: document.getElementById('interfaceOpacity').value
};
this.updateBackgroundPreview();
this.showToast('图片预览成功', 'success');
};
img.onerror = () => {
this.showToast('无法加载图片，请检查链接是否正确', 'error');
};
img.src = url;
}
updateBackgroundPreview() {
const preview = document.querySelector('.preview-container');
const selectedType = document.querySelector('input[name="backgroundType"]:checked').value;
if (selectedType === 'none') {
preview.style.backgroundImage = 'none';
preview.querySelector('.preview-text').textContent = '无背景';
} else if (this.currentBackgroundData && this.currentBackgroundData.type === selectedType) {
const { data, size, opacity, blur } = this.currentBackgroundData;
preview.style.backgroundImage = `url(${data})`;
preview.style.backgroundSize = size;
preview.style.opacity = 1 - opacity;
preview.style.filter = `blur(${blur}px)`;
preview.querySelector('.preview-text').textContent = '背景预览';
} else {
preview.style.backgroundImage = 'none';
preview.querySelector('.preview-text').textContent = '请选择背景图片';
}
}
updateOpacityValue(value) {
document.getElementById('opacityValue').textContent = Math.round(value * 100) + '%';
if (this.currentBackgroundData) {
this.currentBackgroundData.opacity = value;
this.updateBackgroundPreview();
}
}
updateBlurValue(value) {
document.getElementById('blurValue').textContent = value + 'px';
if (this.currentBackgroundData) {
this.currentBackgroundData.blur = value;
this.updateBackgroundPreview();
}
}
updateInterfaceOpacityValue(value) {
document.getElementById('interfaceOpacityValue').textContent = Math.round(value * 100) + '%';
if (this.currentBackgroundData) {
this.currentBackgroundData.interfaceOpacity = value;
this.applyInterfaceOpacity(value);
}
}
applyInterfaceOpacity(opacity) {
const existingStyle = document.getElementById('interface-opacity-style');
if (existingStyle) {
existingStyle.remove();
}
const styleEl = document.createElement('style');
styleEl.id = 'interface-opacity-style';
const mainOpacity = Math.max(1 - opacity, 0.1);
const cardOpacity = Math.max(1 - opacity + 0.1, 0.15);
const chipOpacity = Math.max(1 - opacity + 0.05, 0.12);
styleEl.textContent = `
body.has-background .header {
background: rgba(255, 255, 255, ${Math.max(1 - opacity + 0.05, 0.15)}) !important;
}
body.has-background .main {
background: rgba(255, 255, 255, ${mainOpacity}) !important;
}
body.has-background .chip {
background: rgba(255, 255, 255, ${chipOpacity}) !important;
}
body.has-background .bookmark-card {
background: rgba(255, 255, 255, ${cardOpacity}) !important;
}
body.has-background .modal-content {
background: rgba(255, 255, 255, ${Math.max(1 - opacity + 0.15, 0.2)}) !important;
}
body.has-background .search-input {
background: rgba(255, 255, 255, ${Math.max(1 - opacity + 0.1, 0.18)}) !important;
}
body.has-background .btn-outline {
background: rgba(255, 255, 255, ${chipOpacity}) !important;
}
[data-theme="dark"] body.has-background .header {
background: rgba(30, 30, 30, ${Math.max(1 - opacity + 0.05, 0.15)}) !important;
}
[data-theme="dark"] body.has-background .main {
background: rgba(30, 30, 30, ${mainOpacity}) !important;
}
[data-theme="dark"] body.has-background .chip {
background: rgba(45, 45, 45, ${chipOpacity}) !important;
}
[data-theme="dark"] body.has-background .bookmark-card {
background: rgba(40, 40, 40, ${cardOpacity}) !important;
}
[data-theme="dark"] body.has-background .modal-content {
background: rgba(30, 30, 30, ${Math.max(1 - opacity + 0.15, 0.2)}) !important;
}
[data-theme="dark"] body.has-background .search-input {
background: rgba(45, 45, 45, ${Math.max(1 - opacity + 0.1, 0.18)}) !important;
}
[data-theme="dark"] body.has-background .btn-outline {
background: rgba(45, 45, 45, ${chipOpacity}) !important;
}
`;
document.head.appendChild(styleEl);
}
applyBackground() {
const selectedType = document.querySelector('input[name="backgroundType"]:checked').value;
if (selectedType === 'none') {
this.removeBackground();
} else if (this.currentBackgroundData && this.currentBackgroundData.type === selectedType) {
this.currentBackgroundData.size = document.getElementById('backgroundSize').value;
this.currentBackgroundData.opacity = document.getElementById('backgroundOpacity').value;
this.currentBackgroundData.blur = document.getElementById('backgroundBlur').value;
this.currentBackgroundData.interfaceOpacity = document.getElementById('interfaceOpacity').value;
this.setBackground(this.currentBackgroundData);
this.applyInterfaceOpacity(this.currentBackgroundData.interfaceOpacity);
} else {
this.showToast('请先选择或预览背景图片', 'error');
return;
}
this.saveBackgroundSettings();
this.hideSettingsModal();
this.showToast('背景设置已应用', 'success');
}
setBackground(backgroundData) {
const body = document.body;
body.classList.add('has-background');
const style = body.style;
style.setProperty('--background-image', `url(${backgroundData.data})`);
style.setProperty('--background-size', backgroundData.size);
style.setProperty('--background-opacity', backgroundData.opacity);
style.setProperty('--background-blur', `${backgroundData.blur}px`);
const existingStyle = document.getElementById('dynamic-background-style');
if (existingStyle) {
existingStyle.remove();
}
const styleEl = document.createElement('style');
styleEl.id = 'dynamic-background-style';
styleEl.textContent = `
body.has-background::before {
background-image: ${`url(${backgroundData.data})`};
background-size: ${backgroundData.size};
opacity: ${1 - backgroundData.opacity};
filter: blur(${backgroundData.blur}px);
}
`;
document.head.appendChild(styleEl);
}
removeBackground() {
document.body.classList.remove('has-background');
const existingStyle = document.getElementById('dynamic-background-style');
if (existingStyle) {
existingStyle.remove();
}
const interfaceStyle = document.getElementById('interface-opacity-style');
if (interfaceStyle) {
interfaceStyle.remove();
}
}
resetBackground() {
document.querySelector('input[value="none"]').checked = true;
document.getElementById('backgroundUrl').value = '';
document.getElementById('backgroundUpload').value = '';
document.getElementById('backgroundSize').value = 'cover';
document.getElementById('backgroundOpacity').value = '0.2';
document.getElementById('backgroundBlur').value = '0';
document.getElementById('interfaceOpacity').value = '0.85';
this.updateOpacityValue('0.2');
this.updateBlurValue('0');
this.updateInterfaceOpacityValue('0.85');
this.handleBackgroundTypeChange('none');
this.currentBackgroundData = null;
this.removeBackground();
this.saveBackgroundSettings();
this.showToast('背景已重置', 'success');
}
saveBackgroundSettings() {
const selectedType = document.querySelector('input[name="backgroundType"]:checked').value;
const settings = {
type: selectedType,
data: this.currentBackgroundData
};
localStorage.setItem('bookmarkhub_background_settings', JSON.stringify(settings));
}
loadBackgroundSettings() {
try {
const saved = localStorage.getItem('bookmarkhub_background_settings');
if (saved) {
const settings = JSON.parse(saved);
if (settings.data) {
this.currentBackgroundData = settings.data;
this.setBackground(settings.data);
if (settings.data.interfaceOpacity) {
this.applyInterfaceOpacity(settings.data.interfaceOpacity);
}
}
}
} catch (error) {
console.error('加载背景设置失败:', error);
}
}
loadCurrentBackgroundSettings() {
const saved = localStorage.getItem('bookmarkhub_background_settings');
if (saved) {
try {
const settings = JSON.parse(saved);
const typeRadio = document.querySelector(`input[value="${settings.type}"]`);
if (typeRadio) {
typeRadio.checked = true;
this.handleBackgroundTypeChange(settings.type);
}
if (settings.data) {
this.currentBackgroundData = settings.data;
if (settings.data.type === 'url') {
document.getElementById('backgroundUrl').value = settings.data.data;
}
document.getElementById('backgroundSize').value = settings.data.size || 'cover';
document.getElementById('backgroundOpacity').value = settings.data.opacity || '0.2';
document.getElementById('backgroundBlur').value = settings.data.blur || '0';
document.getElementById('interfaceOpacity').value = settings.data.interfaceOpacity || '0.85';
this.updateOpacityValue(settings.data.opacity || '0.2');
this.updateBlurValue(settings.data.blur || '0');
this.updateInterfaceOpacityValue(settings.data.interfaceOpacity || '0.85');
this.updateBackgroundPreview();
}
} catch (error) {
console.error('恢复背景设置失败:', error);
}
}
}
}
window.testUncategorizedLogic = function() {
console.log('🧪 测试未分类逻辑:');
const hub = window.bookmarkHub;
console.log('📊 所有书签的categoryId状态:');
hub.bookmarks.forEach((bookmark, index) => {
console.log(`${index + 1}. "${bookmark.title}": categoryId = ${bookmark.categoryId} (类型: ${typeof bookmark.categoryId})`);
});
console.log('\n🔍 未分类筛选测试:');
const uncategorizedBookmarks = hub.bookmarks.filter(bookmark => !bookmark.categoryId);
console.log('- 符合!bookmark.categoryId条件的书签数量:', uncategorizedBookmarks.length);
uncategorizedBookmarks.forEach((bookmark, index) => {
console.log(`  ${index + 1}. "${bookmark.title}": categoryId = ${bookmark.categoryId}`);
});
const nullCategoryBookmarks = hub.bookmarks.filter(bookmark => bookmark.categoryId === null);
console.log('- 符合categoryId === null条件的书签数量:', nullCategoryBookmarks.length);
const undefinedCategoryBookmarks = hub.bookmarks.filter(bookmark => bookmark.categoryId === undefined);
console.log('- 符合categoryId === undefined条件的书签数量:', undefinedCategoryBookmarks.length);
const emptyCategoryBookmarks = hub.bookmarks.filter(bookmark => bookmark.categoryId === '');
console.log('- 符合categoryId === ""条件的书签数量:', emptyCategoryBookmarks.length);
const testBookmark = {
id: 'test_uncategorized_' + Date.now(),
title: '测试未分类书签',
url: 'https:
categoryId: null,
createdAt: Date.now()
};
hub.bookmarks.push(testBookmark);
console.log('\n➕ 添加测试书签到未分类');
hub.setFilter('uncategorized');
console.log('🔄 切换到未分类视图');
const filtered = hub.getFilteredBookmarks();
console.log('- 当前筛选:', hub.currentFilter);
console.log('- 未分类书签数量:', filtered.length);
console.log('- 包含测试书签:', filtered.some(b => b.id === testBookmark.id));
setTimeout(() => {
const batchBtn = document.getElementById('batchDeleteBtn');
const batchActions = document.getElementById('batchActions');
console.log('- 批量删除按钮存在:', !!batchBtn);
console.log('- 批量操作容器显示:', batchActions?.style.display);
}, 100);
};
window.checkCategoryDeletion = function() {
console.log('🔍 检查分类删除后的书签状态:');
const hub = window.bookmarkHub;
const testCategory = {
id: 'test_category_' + Date.now(),
name: '测试分类删除',
color: '#ff0000',
createdAt: Date.now()
};
const testBookmark = {
id: 'test_bookmark_' + Date.now(),
title: '测试分类删除书签',
url: 'https:
categoryId: testCategory.id,
createdAt: Date.now()
};
hub.categories.push(testCategory);
hub.bookmarks.push(testBookmark);
console.log('➕ 创建测试分类和书签');
console.log('- 测试分类ID:', testCategory.id);
console.log('- 测试书签的categoryId:', testBookmark.categoryId);
hub.saveData();
hub.render();
console.log('💾 数据已保存，界面已更新');
console.log('📝 现在请手动删除"测试分类删除"分类，然后运行 checkAfterDeletion()');
window.testBookmarkId = testBookmark.id;
};
window.checkAfterDeletion = function() {
console.log('🔍 检查分类删除后的状态:');
const hub = window.bookmarkHub;
if (!window.testBookmarkId) {
console.log('❌ 请先运行 checkCategoryDeletion()');
return;
}
const testBookmark = hub.bookmarks.find(b => b.id === window.testBookmarkId);
if (!testBookmark) {
console.log('❌ 测试书签不存在，可能已被删除');
return;
}
console.log('📊 测试书签状态:');
console.log('- 书签标题:', testBookmark.title);
console.log('- categoryId值:', testBookmark.categoryId);
console.log('- categoryId类型:', typeof testBookmark.categoryId);
console.log('- 是否为null:', testBookmark.categoryId === null);
console.log('- 是否为undefined:', testBookmark.categoryId === undefined);
console.log('- !categoryId结果:', !testBookmark.categoryId);
hub.setFilter('uncategorized');
const filtered = hub.getFilteredBookmarks();
console.log('\n🔍 未分类筛选结果:');
console.log('- 未分类书签总数:', filtered.length);
console.log('- 包含测试书签:', filtered.some(b => b.id === window.testBookmarkId));
};
window.testImportDataFix = function() {
console.log('🧪 测试导入数据修复功能:');
const hub = window.bookmarkHub;
const problematicData = {
bookmarks: [
{
id: 'test_import_1',
title: '导入测试书签1',
url: 'https:
categoryId: 'nonexistent_category_1',
createdAt: Date.now()
},
{
id: 'test_import_2',
title: '导入测试书签2',
url: 'https:
categoryId: 'nonexistent_category_2',
createdAt: Date.now()
},
{
id: 'test_import_3',
title: '导入测试书签3',
url: 'https:
categoryId: null,
createdAt: Date.now()
}
],
categories: [
{
id: 'valid_category',
name: '有效分类',
color: '#00FF00',
createdAt: Date.now()
}
]
};
console.log('📥 模拟导入有问题的数据:');
console.log('- 书签数量:', problematicData.bookmarks.length);
console.log('- 分类数量:', problematicData.categories.length);
console.log('- 孤立书签:', problematicData.bookmarks.filter(b =>
b.categoryId && !problematicData.categories.some(c => c.id === b.categoryId)
).length);
const backupBookmarks = [...hub.bookmarks];
const backupCategories = [...hub.categories];
hub.bookmarks = problematicData.bookmarks;
hub.categories = problematicData.categories;
console.log('\n🔧 执行数据修复:');
hub.fixOrphanedBookmarks();
const uncategorizedAfterFix = hub.bookmarks.filter(b => !b.categoryId);
console.log('\n📊 修复后的结果:');
console.log('- 未分类书签数量:', uncategorizedAfterFix.length);
uncategorizedAfterFix.forEach((bookmark, index) => {
console.log(`  ${index + 1}. "${bookmark.title}": categoryId = ${bookmark.categoryId}`);
});
hub.bookmarks = backupBookmarks;
hub.categories = backupCategories;
hub.saveData();
hub.render();
console.log('\n✅ 测试完成，数据已恢复');
};
document.addEventListener('DOMContentLoaded', () => {
console.log('🚀 DOM加载完成，开始初始化应用');
try {
window.bookmarkHub = new BookmarkHub();
console.log('✅ BookmarkHub初始化成功');
console.log('💡 可用的测试函数:');
console.log('  - testUncategorizedLogic() - 测试未分类逻辑');
console.log('  - testImportDataFix() - 测试导入数据修复');
console.log('  - checkCategoryDeletion() - 测试分类删除');
} catch (error) {
console.error('❌ BookmarkHub初始化失败:', error);
}
});
if (!localStorage.getItem('bookmarkhub_bookmarks')) {
const sampleBookmarks = [];
const websites = [
{ title: 'GitHub', url: 'https:
{ title: 'MDN Web Docs', url: 'https:
{ title: 'Stack Overflow', url: 'https:
{ title: 'Vue.js', url: 'https:
{ title: 'React', url: 'https:
{ title: 'Node.js', url: 'https:
{ title: 'TypeScript', url: 'https:
{ title: 'Webpack', url: 'https:
{ title: 'Vite', url: 'https:
{ title: 'Tailwind CSS', url: 'https:
{ title: 'Bootstrap', url: 'https:
{ title: 'Sass', url: 'https:
{ title: 'Less', url: 'https:
{ title: 'Babel', url: 'https:
{ title: 'ESLint', url: 'https:
{ title: 'Prettier', url: 'https:
{ title: 'Jest', url: 'https:
{ title: 'Cypress', url: 'https:
{ title: 'Docker', url: 'https:
{ title: 'Kubernetes', url: 'https:
{ title: 'AWS', url: 'https:
{ title: 'Google Cloud', url: 'https:
{ title: 'Azure', url: 'https:
{ title: 'Firebase', url: 'https:
{ title: 'Vercel', url: 'https:
{ title: 'Netlify', url: 'https:
{ title: 'MongoDB', url: 'https:
{ title: 'PostgreSQL', url: 'https:
{ title: 'Redis', url: 'https:
{ title: 'GraphQL', url: 'https:
{ title: 'Figma', url: 'https:
{ title: 'Adobe XD', url: 'https:
{ title: 'Sketch', url: 'https:
{ title: 'Dribbble', url: 'https:
{ title: 'Behance', url: 'https:
{ title: 'Unsplash', url: 'https:
{ title: 'Pexels', url: 'https:
{ title: 'YouTube', url: 'https:
{ title: 'Netflix', url: 'https:
{ title: 'Spotify', url: 'https:
{ title: 'TikTok', url: 'https:
{ title: 'Instagram', url: 'https:
{ title: 'Twitter', url: 'https:
{ title: 'LinkedIn', url: 'https:
{ title: 'Discord', url: 'https:
{ title: 'Slack', url: 'https:
{ title: 'Notion', url: 'https:
{ title: 'Trello', url: 'https:
{ title: 'Asana', url: 'https:
{ title: 'Jira', url: 'https:
];
for (let i = 0; i < 50; i++) {
const website = websites[i % websites.length];
const bookmark = {
id: `sample${i + 1}`,
title: `${website.title}${i > websites.length - 1 ? ` (${Math.floor(i / websites.length) + 1})` : ''}`,
url: website.url,
description: website.description,
imageUrl: website.imageUrl || null,
categoryId: website.category,
createdAt: Date.now() - (i * 3600000),
updatedAt: Date.now() - (i * 3600000),
visitCount: Math.floor(Math.random() * 20) + 1
};
sampleBookmarks.push(bookmark);
}
localStorage.setItem('bookmarkhub_bookmarks', JSON.stringify(sampleBookmarks));
const sampleCategories = [
{
id: 'work',
name: '工作',
color: '#2196F3',
createdAt: Date.now() - 86400000
},
{
id: 'study',
name: '学习',
color: '#4CAF50',
createdAt: Date.now() - 86400000
},
{
id: 'entertainment',
name: '娱乐',
color: '#FF9800',
createdAt: Date.now() - 86400000
}
];
localStorage.setItem('bookmarkhub_categories', JSON.stringify(sampleCategories));
}
window.testMobileExport = function() {
const bookmarkHub = window.bookmarkHub;
if (!bookmarkHub) {
console.log('BookmarkHub未初始化');
return;
}
const userAgent = navigator.userAgent;
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
console.log('=== 移动端检测测试 ===');
console.log('用户代理:', userAgent);
console.log('检测为移动设备:', isMobile);
console.log('窗口尺寸:', window.innerWidth + 'x' + window.innerHeight);
console.log('测试备份功能：现在所有设备都使用标准文件下载方式');
console.log('移动端复制面板已移除，改为直接下载文件');
};
function preventContextMenu() {
console.log('🛡️ 设置全局上下文菜单阻止');
document.addEventListener('contextmenu', (e) => {
if (e.target.closest('.bookmark-card') || e.target.closest('.bookmark-card-wrapper')) {
console.log('🚫 全局阻止书签卡片上下文菜单', e.target);
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
return false;
}
}, true);
document.addEventListener('selectstart', (e) => {
if (e.target.closest('.bookmark-card') || e.target.closest('.bookmark-card-wrapper')) {
console.log('🚫 全局阻止书签卡片选择', e.target);
e.preventDefault();
return false;
}
}, true);
document.addEventListener('dragstart', (e) => {
if (e.target.closest('.bookmark-card') || e.target.closest('.bookmark-card-wrapper')) {
console.log('🚫 全局阻止书签卡片拖拽', e.target);
e.preventDefault();
return false;
}
}, true);
if ('ontouchstart' in window) {
document.addEventListener('touchstart', (e) => {
if (e.target.closest('.bookmark-card') || e.target.closest('.bookmark-card-wrapper')) {
console.log('🛡️ 全局移动端触摸检测', e.target.tagName, e.target.className);
e.target.setAttribute('data-bookmark-touch', 'true');
setTimeout(() => {
if (e.target && e.target.removeAttribute) {
e.target.removeAttribute('data-bookmark-touch');
}
}, 1000);
}
}, { passive: true });
document.addEventListener('contextmenu', (e) => {
if (e.target.hasAttribute && e.target.hasAttribute('data-bookmark-touch')) {
console.log('🚫 移动端全局强制阻止长按菜单');
e.preventDefault();
e.stopPropagation();
e.stopImmediatePropagation();
return false;
}
}, true);
}
}