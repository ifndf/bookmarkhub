(function() {
'use strict';
function loadCSS(href, media) {
const link = document.createElement('link');
link.rel = 'stylesheet';
link.href = href;
link.media = media || 'all';
document.head.appendChild(link);
}
function lazyLoadImages() {
const images = document.querySelectorAll('img[data-src]');
const imageObserver = new IntersectionObserver((entries, observer) => {
entries.forEach(entry => {
if (entry.isIntersecting) {
const img = entry.target;
img.src = img.dataset.src;
img.removeAttribute('data-src');
observer.unobserve(img);
}
});
});
images.forEach(img => imageObserver.observe(img));
}
function preloadResources() {
const criticalResources = [
{ href: 'styles.css', as: 'style' },
{ href: 'script.js', as: 'script' }
];
criticalResources.forEach(resource => {
const link = document.createElement('link');
link.rel = 'preload';
link.href = resource.href;
link.as = resource.as;
if (resource.as === 'style') {
link.onload = function() {
this.rel = 'stylesheet';
};
}
document.head.appendChild(link);
});
}
async function loadModuleOnDemand(moduleName) {
try {
const module = await import(`./src/${moduleName}.js`);
return module;
} catch (error) {
console.error(`Failed to load module ${moduleName}:`, error);
}
}
function registerServiceWorker() {
if ('serviceWorker' in navigator) {
window.addEventListener('load', () => {
navigator.serviceWorker.register('./sw.js')
.then(registration => {
console.log('SW registered: ', registration);
})
.catch(registrationError => {
console.log('SW registration failed: ', registrationError);
});
});
}
}
function performanceMonitor() {
const observer = new PerformanceObserver((list) => {
const entries = list.getEntries();
entries.forEach((entry) => {
console.log(`${entry.name}: ${entry.startTime}ms`);
});
});
observer.observe({ entryTypes: ['paint', 'largest-contentful-paint'] });
window.addEventListener('load', () => {
const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
console.log(`Page load time: ${loadTime}ms`);
});
}
function setResourcePriority() {
const criticalLinks = document.querySelectorAll('link[rel="preload"]');
criticalLinks.forEach(link => {
if (link.as === 'style' || link.as === 'script') {
link.setAttribute('importance', 'high');
}
});
}
function init() {
if (document.readyState === 'loading') {
document.addEventListener('DOMContentLoaded', () => {
lazyLoadImages();
performanceMonitor();
setResourcePriority();
});
} else {
lazyLoadImages();
performanceMonitor();
setResourcePriority();
}
window.addEventListener('load', () => {
registerServiceWorker();
});
}
window.PerformanceOptimizer = {
loadCSS,
lazyLoadImages,
preloadResources,
loadModuleOnDemand,
registerServiceWorker,
performanceMonitor,
init
};
init();
})();